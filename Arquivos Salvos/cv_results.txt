{'mean_fit_time': array([2.11711613e+00, 3.38690612e+01, 4.31231864e+00, 1.42438470e+02,
       3.75810385e+00, 7.14301337e+01, 8.66709185e+00, 1.06078434e+01,
       3.66776387e+00, 3.82260505e+00, 8.75503268e+01, 3.80961323e+00,
       1.05201972e+01, 7.85440922e-01, 1.08269889e+01, 1.91203343e+01,
       1.41414868e+02, 4.97736144e+00, 2.27553502e+01, 4.13257055e+01,
       1.44389216e+00, 3.26830411e+00, 8.75404471e+01, 1.21993943e+02,
       9.06918224e+01, 1.09561662e+02, 1.31591002e-01, 1.79227849e+01,
       4.30428505e-01, 1.17936434e+01, 3.81109126e+00, 7.65970788e+01,
       1.71227838e+01, 3.12208811e-01, 1.04504234e+01, 8.27865175e+01,
       6.88081226e+01, 6.14897521e+00, 8.36385552e+01, 8.20777472e+00,
       1.51977103e+01, 1.21132864e+01, 1.60325208e+01, 1.34024910e+02,
       3.54999235e+01, 6.43681886e+01, 1.82236060e+01, 7.18760830e+01,
       4.75949049e-01, 1.21659474e+01, 1.69820508e+01, 6.78203917e+01,
       2.86459327e+00, 6.45903164e+01, 2.64955327e+01, 5.91372948e+01,
       7.70979572e+01, 1.66793999e+01, 3.83648872e-01, 6.75390386e+01,
       6.66120647e+01, 9.29360032e+00, 6.52219164e+01, 3.94105434e-01,
       1.80794540e+01, 8.94021686e+00, 5.37007284e+00, 1.18187803e+01,
       7.35835536e+01, 7.17794859e+01, 2.18854869e+01, 8.13660081e+00,
       6.74804219e+00, 8.83754603e+01, 9.92830825e+00, 8.47617301e+01,
       9.02479474e+00, 4.52518582e+00, 6.57609773e+00, 7.35611187e+01,
       1.76763500e+01, 7.93355487e+01, 1.14749817e+01, 1.04645602e+02,
       5.83008575e+00, 1.12545816e+02, 5.47164138e+00, 5.48648683e+00,
       3.16938877e-01, 7.19496416e+01, 6.12440523e+00, 6.59625212e+01,
       2.61442010e+00, 1.98051220e+01, 2.55692747e+01, 3.07110095e+00,
       1.46858222e+01, 1.36205242e+01, 6.48506463e+01, 1.02092199e+02,
       6.49483347e+00, 4.07749971e-01, 4.58201019e+00, 1.27209195e+00,
       9.52731527e+01, 1.25140777e+01, 1.74656148e+01, 2.14498706e+01,
       1.82814209e+00, 1.47603722e+01, 3.13498094e+01, 6.88613911e+01,
       5.44571304e+00, 9.88588095e+00, 5.92679048e+00, 5.93711575e+00,
       2.17285056e+01, 8.75004762e+01, 7.72563943e+01, 9.80157558e+00,
       1.33241381e+01, 6.77345333e+01, 1.10601815e+01, 3.23006479e+00,
       3.15445646e+00, 4.80261985e+00, 7.37262235e+01, 1.00439246e+00,
       5.07923110e+00, 3.72831639e+00, 2.80908173e+01, 7.10432016e+01,
       9.01762928e+01, 1.86203283e+01, 7.92177256e+00, 3.96262451e+01,
       7.14989571e+01, 1.39637058e+01, 4.57766143e+00, 2.16060588e+01,
       6.99004141e+00, 1.73539210e+01, 2.71218348e+00, 2.76330708e+01,
       3.72030155e+00, 7.31364825e+01, 1.32971911e+01, 1.80960973e+00,
       4.49325236e+00, 6.72326088e+00]), 'std_fit_time': array([5.63466699e-02, 1.92313874e-01, 1.13739123e-01, 1.47845747e+01,
       5.06908969e-02, 1.98248416e+01, 4.98890656e-01, 6.03884974e-01,
       3.08915141e-01, 1.07232230e-01, 1.95126691e+01, 3.72892174e-02,
       9.26472933e-02, 5.36648464e-02, 2.66414735e-02, 2.62702436e-02,
       1.80043775e+01, 5.24717604e-02, 2.60668639e-01, 1.14534999e+01,
       8.93520821e-02, 1.11436918e-01, 1.91561501e+01, 1.99358040e+01,
       1.63850007e+01, 1.93969073e+01, 6.40137277e-03, 1.18258483e-01,
       5.66419373e-02, 1.33595564e-01, 9.82664125e-02, 1.44631707e+01,
       1.59170088e+00, 1.17632080e-02, 1.74390205e-01, 1.73328663e+01,
       1.63095939e+01, 1.72568361e-01, 1.57526635e+01, 1.01936112e-01,
       6.16248931e-02, 7.08204185e-02, 2.69380537e-01, 1.59062563e+01,
       1.18598848e+00, 1.95598420e+01, 2.00176851e-01, 1.63189757e+01,
       2.73005860e-02, 1.95989297e-01, 1.20046908e+00, 1.93176869e+01,
       4.69376310e-02, 1.42663120e+01, 1.28688903e+00, 1.67083622e+01,
       1.31702120e+01, 1.13410371e-01, 2.02610575e-02, 1.50058308e+01,
       1.70856200e+01, 3.31431595e-02, 1.51885731e+01, 3.02491885e-02,
       1.79101473e+00, 1.33409465e-01, 3.11204376e-01, 2.29487902e-01,
       1.37956334e+01, 1.25604170e+01, 1.58836970e-01, 7.06027317e-02,
       5.02950663e-02, 1.55701117e+01, 7.46471133e-02, 1.54458042e+01,
       3.20611572e-02, 1.45738015e-01, 1.50972947e-01, 1.86507113e+01,
       3.67483549e+00, 1.68671253e+01, 7.26152206e-01, 1.97860799e+01,
       8.25100224e-02, 1.29196648e+01, 5.72426519e-02, 2.08388410e-02,
       4.34504600e-02, 2.38963669e+00, 3.20143227e-01, 1.69149159e+01,
       2.61527159e-02, 1.57255599e+00, 2.43053147e-01, 1.09060781e-01,
       4.83988331e-01, 1.55451209e-01, 1.03801873e+01, 1.34321846e+01,
       4.69410957e-01, 3.34568976e-02, 5.34570758e-01, 5.02109394e-02,
       1.79446459e+01, 1.53944996e+00, 7.87319017e-01, 8.81661051e-01,
       4.92375771e-02, 8.19882974e-02, 1.20592314e+01, 1.39045876e+01,
       1.24401926e-01, 8.44165910e-02, 5.26148384e-02, 3.71139586e-02,
       1.07370697e-01, 1.66130186e+01, 1.32770767e+01, 1.35867552e+00,
       4.82371124e-01, 2.36064384e+01, 7.69649849e-02, 5.03774091e-02,
       1.48901161e-01, 5.07097227e-02, 1.37788128e+01, 5.19809253e-02,
       8.80436317e-02, 5.84583949e-02, 5.84482144e-03, 1.81613031e+01,
       9.86602949e+00, 1.22476876e+00, 7.86744569e-02, 1.64525441e+00,
       1.22122291e+01, 9.45416447e-01, 7.54249918e-02, 8.24314151e-02,
       3.88521869e-01, 1.37266592e-01, 5.29693254e-02, 7.68325708e+00,
       1.33149868e-01, 1.46146889e+01, 1.04877462e+00, 8.50091237e-02,
       1.94832251e-01, 1.07247220e-01]), 'mean_score_time': array([0.26879533, 0.74210159, 0.29374035, 0.63805763, 0.36711868,
       0.11727993, 0.62432424, 0.6827143 , 0.29992   , 0.35210943,
       0.44583972, 0.21741724, 0.39044801, 0.03032486, 0.49665689,
       0.72114452, 0.96201372, 0.48206615, 0.77045536, 0.84834091,
       0.06935438, 0.30805898, 0.2803851 , 0.55960258, 0.83975339,
       0.99966685, 0.02203925, 0.80038158, 0.02336812, 0.94932373,
       0.39147449, 0.91281645, 0.85602617, 0.032962  , 0.3608466 ,
       0.46386417, 0.0711058 , 0.49351438, 0.71614583, 0.46186145,
       0.42532539, 0.51870696, 0.88398608, 0.47319484, 1.00945361,
       0.05294776, 0.77132241, 0.07778509, 0.03445514, 0.64871796,
       0.71840278, 0.04382253, 0.20787843, 0.44612821, 0.81672629,
       0.0482223 , 0.99063683, 0.68813841, 0.03573219, 0.07119966,
       0.08714422, 0.58246525, 0.0432895 , 0.03048015, 0.87627888,
       0.75077033, 0.34144894, 0.37480712, 0.9689769 , 0.38629874,
       0.53467147, 0.66776307, 0.44388072, 0.99345716, 0.81934269,
       0.8160491 , 0.87650688, 0.26270334, 0.34991256, 0.26339165,
       0.45616595, 0.8200229 , 0.5407474 , 0.82343594, 0.35466695,
       0.21768792, 0.32384769, 0.34198078, 0.03639722, 0.45765344,
       0.51914096, 0.37543392, 0.11157425, 0.27284503, 0.78499389,
       0.21718661, 0.66254751, 0.70028416, 0.48554333, 0.83582505,
       0.54143143, 0.0344557 , 0.29295278, 0.15953048, 0.63015103,
       0.82783834, 0.6991396 , 0.58913048, 0.14211949, 0.80772781,
       0.55045835, 0.58760293, 0.29355168, 0.51539246, 0.27186076,
       0.17391896, 0.78368378, 0.91852951, 0.32006478, 0.21537574,
       0.50873923, 0.03993074, 0.41688546, 0.21809657, 0.24833854,
       0.23452544, 0.41014918, 0.0632143 , 0.17998711, 0.18415626,
       0.17650453, 0.35536281, 0.83196012, 0.76020145, 0.59260678,
       0.69657167, 0.23645814, 0.64216018, 0.35856517, 0.67881385,
       0.5505112 , 0.62647057, 0.12370578, 0.60484362, 0.21567138,
       0.78603872, 0.70408678, 0.11873253, 0.34299326, 0.61968303]), 'std_score_time': array([0.01714557, 0.02465486, 0.032953  , 0.02680787, 0.02984668,
       0.02544882, 0.02660486, 0.05077036, 0.02989181, 0.03035681,
       0.01694518, 0.01776133, 0.00831204, 0.00839772, 0.01681892,
       0.0183761 , 0.09089135, 0.04665059, 0.10009127, 0.02048962,
       0.00551897, 0.01513186, 0.01935319, 0.05040277, 0.0611033 ,
       0.20712921, 0.00246765, 0.05298861, 0.00754796, 0.00970188,
       0.05981191, 0.02653184, 0.03080499, 0.00530258, 0.01747441,
       0.02494405, 0.02075147, 0.0675073 , 0.00971156, 0.03790051,
       0.00525366, 0.04991577, 0.01984175, 0.02239873, 0.02094454,
       0.00467611, 0.01695701, 0.02287518, 0.00229847, 0.0355446 ,
       0.03284752, 0.00169859, 0.00951664, 0.02514425, 0.02396817,
       0.00408334, 0.16593291, 0.0285765 , 0.00617679, 0.01934567,
       0.00892047, 0.04753779, 0.00480306, 0.0097452 , 0.02743689,
       0.0458909 , 0.02398474, 0.02148813, 0.02654282, 0.02239205,
       0.01936616, 0.03909526, 0.00689945, 0.11380807, 0.03715079,
       0.08276856, 0.01607993, 0.01157674, 0.01673419, 0.01293198,
       0.00275078, 0.00323272, 0.0108562 , 0.03405118, 0.01623535,
       0.00600597, 0.00162816, 0.02272526, 0.0107537 , 0.01558003,
       0.02224627, 0.00218702, 0.00780655, 0.02907415, 0.04137473,
       0.01023981, 0.04342054, 0.04085706, 0.03085519, 0.04889074,
       0.07396496, 0.00367461, 0.0416782 , 0.01235697, 0.02644429,
       0.03281539, 0.03298125, 0.04807197, 0.01057604, 0.01431073,
       0.01455381, 0.01368929, 0.03261743, 0.01071403, 0.00640608,
       0.0028514 , 0.03285879, 0.06044439, 0.00660028, 0.01133035,
       0.01559157, 0.00086567, 0.04338231, 0.01771895, 0.0101177 ,
       0.00352856, 0.00866609, 0.00460528, 0.0292214 , 0.00866957,
       0.00476448, 0.03040022, 0.0946342 , 0.05743509, 0.02236374,
       0.03853986, 0.00533113, 0.01563943, 0.04615602, 0.04742402,
       0.03629381, 0.01248674, 0.00651677, 0.01130329, 0.00980767,
       0.03137311, 0.06632691, 0.003692  , 0.04014864, 0.08694411]), 'param_classifier__base_estimator__bootstrap': masked_array(data=[True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True, True, True, True,
                   True, True, True, True, True, True],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__base_estimator__ccp_alpha': masked_array(data=[0.03638628715886626, 0.04416576386904311,
                   0.04593612608346886, 0.008593578069828035,
                   0.02190145932204617, 0.04696848688013859,
                   0.03876821894139413, 0.046000461321865825,
                   0.0350310722310683, 0.040891500983187584,
                   4.431344851218989e-06, 0.018523163302893508,
                   0.030764726731833992, 0.008268263720592858,
                   0.02300916233323594, 0.02252026860772129,
                   0.009167890660329388, 0.035634030909898355,
                   0.041942269049468406, 0.049955088459584795,
                   0.010485944715268633, 0.00038454418479051965,
                   0.010098287067188186, 0.04372949660535073,
                   0.005909098018287665, 0.020802023170178374, 0.0,
                   0.028735624607826773, 0.013170932151111087, 0.0,
                   0.04351746531566193, 0.05, 0.05, 0.03825737327716991,
                   0.0371661345949661, 0.004683200194329985, 0.0,
                   0.04107963553548775, 0.012947455315137713,
                   0.01466140922609626, 0.0064098559240157674,
                   0.031389303612554424, 0.0483335799855888,
                   0.039573585052656235, 0.009303249737590382,
                   0.04396941280680388, 0.03887398436213335, 0.05,
                   0.01668612730457688, 0.03891381105180706,
                   0.04868485451712776, 0.015459724353075641,
                   0.024877798381721206, 0.041027996535113485,
                   0.03693098138468961, 0.0, 0.021720574598550087,
                   0.03313589113052087, 0.014351179632211242, 0.0,
                   0.0049477570771137664, 0.02173311164596413, 0.0,
                   0.01826681510825699, 0.01674689615717267, 0.0,
                   0.0014794052820630568, 0.0, 0.015220299824972845,
                   0.02823085875134609, 0.02081069176063202,
                   0.02847269822176986, 0.005020744127480157,
                   0.020969413254787583, 0.05, 0.05, 0.05,
                   0.003092151987956214, 0.04580776243543739,
                   0.03890494754487908, 0.015534045041368093, 0.05,
                   0.04132818524616544, 0.009412818874284202,
                   0.022214262564537082, 0.030084797065635105,
                   0.01473908905705996, 0.022824328487176217,
                   0.034656814781857774, 0.044416184071418494,
                   0.04241414672712576, 0.017274257573882526, 0.0,
                   0.040177182043015354, 0.010385610332962682,
                   0.04550225592951889, 0.022546826828609697,
                   0.03693984766779431, 0.009947220988894265,
                   0.039965492088013706, 0.011393808629661002,
                   0.01164320385606734, 0.030329271355040634,
                   0.005168123601738071, 0.04343557531023225,
                   0.02341097800947596, 0.0009297965416111809,
                   0.015255788042483624, 0.020809683495765462, 0.0,
                   0.03433536765746779, 0.039401758828202585,
                   0.0021194825781546286, 0.034095837136238566,
                   0.027425522144224102, 0.02001991473377683,
                   0.04121982005542652, 0.019841625840443255,
                   0.004400538609678594, 0.02464423241359261,
                   0.04283737062882047, 0.03463505858299876,
                   0.04796138784204759, 0.03398381796014683,
                   0.031355724776367534, 0.02789099109311335,
                   0.0051897475323795135, 0.034491035043096155,
                   0.03539142042312425, 0.036842773268064524,
                   0.026486851117608953, 0.05, 0.005872491116599155,
                   0.025223335346422356, 0.0071408814661196515,
                   0.022147881414578748, 0.019786184656402774,
                   0.02645374336010984, 0.0005599633357182007,
                   0.030945640828540084, 0.03011439616520883,
                   0.017581391287492986, 0.03543350795433445,
                   0.021199087609629755, 0.03086045367763157,
                   0.020877027409518353, 0.03819298556498897,
                   0.034534909998840936, 0.010272639035853256, 0.05],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__base_estimator__class_weight': masked_array(data=[None, 'balanced_subsample', 'balanced',
                   'balanced_subsample', 'balanced_subsample', 'balanced',
                   'balanced_subsample', 'balanced_subsample', None,
                   'balanced_subsample', 'balanced_subsample', None,
                   'balanced_subsample', 'balanced', None, None,
                   'balanced_subsample', 'balanced_subsample',
                   'balanced_subsample', 'balanced', 'balanced_subsample',
                   'balanced_subsample', 'balanced_subsample', None,
                   'balanced_subsample', 'balanced_subsample', None, None,
                   'balanced', 'balanced', 'balanced_subsample',
                   'balanced', 'balanced', None, 'balanced', 'balanced',
                   None, 'balanced', None, 'balanced', 'balanced',
                   'balanced', 'balanced_subsample', None,
                   'balanced_subsample', 'balanced_subsample', None, None,
                   'balanced', 'balanced', 'balanced', 'balanced',
                   'balanced_subsample', 'balanced_subsample',
                   'balanced_subsample', None, None, 'balanced_subsample',
                   'balanced_subsample', None, 'balanced_subsample',
                   'balanced_subsample', None, 'balanced_subsample',
                   'balanced_subsample', 'balanced_subsample',
                   'balanced_subsample', 'balanced_subsample',
                   'balanced_subsample', 'balanced', 'balanced_subsample',
                   'balanced_subsample', 'balanced_subsample', None, None,
                   'balanced_subsample', 'balanced', 'balanced',
                   'balanced_subsample', 'balanced_subsample',
                   'balanced_subsample', None, 'balanced_subsample',
                   'balanced_subsample', 'balanced', 'balanced_subsample',
                   'balanced', 'balanced_subsample', 'balanced',
                   'balanced_subsample', 'balanced', 'balanced_subsample',
                   'balanced', 'balanced', 'balanced_subsample',
                   'balanced_subsample', 'balanced_subsample',
                   'balanced_subsample', None, 'balanced_subsample', None,
                   'balanced_subsample', None, 'balanced_subsample',
                   'balanced_subsample', 'balanced_subsample',
                   'balanced_subsample', 'balanced_subsample',
                   'balanced_subsample', 'balanced_subsample',
                   'balanced_subsample', None, 'balanced_subsample',
                   'balanced_subsample', None, 'balanced',
                   'balanced_subsample', None, 'balanced_subsample',
                   'balanced_subsample', 'balanced_subsample', 'balanced',
                   'balanced_subsample', 'balanced_subsample', 'balanced',
                   'balanced_subsample', 'balanced_subsample', 'balanced',
                   'balanced_subsample', 'balanced_subsample',
                   'balanced_subsample', 'balanced_subsample',
                   'balanced_subsample', 'balanced', 'balanced_subsample',
                   'balanced_subsample', 'balanced', 'balanced_subsample',
                   'balanced_subsample', 'balanced_subsample',
                   'balanced_subsample', None, 'balanced_subsample', None,
                   None, 'balanced', 'balanced', 'balanced',
                   'balanced_subsample', None],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__base_estimator__criterion': masked_array(data=['gini', 'log_loss', 'gini', 'log_loss', 'gini',
                   'entropy', 'log_loss', 'log_loss', 'gini', 'gini',
                   'entropy', 'gini', 'gini', 'gini', 'entropy',
                   'entropy', 'gini', 'log_loss', 'gini', 'log_loss',
                   'entropy', 'entropy', 'entropy', 'log_loss', 'gini',
                   'gini', 'entropy', 'gini', 'entropy', 'entropy',
                   'log_loss', 'log_loss', 'log_loss', 'log_loss', 'gini',
                   'gini', 'entropy', 'gini', 'log_loss', 'log_loss',
                   'gini', 'entropy', 'entropy', 'log_loss', 'gini',
                   'entropy', 'log_loss', 'log_loss', 'entropy', 'gini',
                   'entropy', 'log_loss', 'log_loss', 'log_loss',
                   'entropy', 'gini', 'log_loss', 'gini', 'entropy',
                   'gini', 'entropy', 'gini', 'entropy', 'log_loss',
                   'log_loss', 'entropy', 'gini', 'log_loss', 'log_loss',
                   'log_loss', 'log_loss', 'gini', 'entropy', 'log_loss',
                   'entropy', 'log_loss', 'entropy', 'log_loss',
                   'log_loss', 'gini', 'gini', 'entropy', 'log_loss',
                   'entropy', 'gini', 'entropy', 'gini', 'entropy',
                   'gini', 'log_loss', 'log_loss', 'entropy', 'log_loss',
                   'entropy', 'gini', 'log_loss', 'gini', 'gini',
                   'entropy', 'gini', 'gini', 'log_loss', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini', 'log_loss', 'log_loss',
                   'entropy', 'entropy', 'gini', 'entropy', 'gini',
                   'entropy', 'log_loss', 'gini', 'gini', 'gini', 'gini',
                   'gini', 'gini', 'log_loss', 'log_loss', 'gini', 'gini',
                   'log_loss', 'log_loss', 'gini', 'log_loss', 'gini',
                   'entropy', 'gini', 'gini', 'entropy', 'log_loss',
                   'entropy', 'entropy', 'log_loss', 'entropy',
                   'log_loss', 'log_loss', 'entropy', 'gini', 'gini',
                   'gini', 'gini', 'gini', 'gini'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__base_estimator__max_depth': masked_array(data=[1024, 8192, 8, 256, 16384, 4096, 512, 32, 64, 512, 2,
                   1024, 8192, 1, 512, 8192, 8192, 256, 2, 8, 4, 16, 8,
                   None, None, 4, None, 1024, 256, 1, 16, 1, None, 4096,
                   2048, 4096, None, 16384, 4, 64, 512, 1024, 4096, 8,
                   8192, None, 32, 1, 1, 64, 64, 32, 8, 512, 8192, None,
                   None, 256, 1, 1, 1024, 8192, 4096, 512, 4, 1, 4, 64,
                   4096, 32, 64, 32, 2, 1, None, 1, 8192, 2048, 1024, 512,
                   8192, 16, 4096, 4, 4096, 8, 16, 32, 2, 2048, 16384, 32,
                   256, 1024, 512, 256, 32, 128, 4096, 2, 1, 1, 4, 1, 256,
                   8, 2048, 2048, 512, 16, 8192, 4096, 2, 2, 256, 1024,
                   128, None, 128, 64, 1024, 1024, 16384, None, 1, 8, 4,
                   512, 256, 1024, 64, None, None, 1024, 2048, 256, 1024,
                   256, 128, 2, 256, 4, 1024, 4096, 2048, 512, 4, 64,
                   16384, 2],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__base_estimator__max_features': masked_array(data=['log2', 'log2', 'log2', 'log2', 'sqrt', 'log2', 'sqrt',
                   'log2', 'log2', 'log2', 'sqrt', 'sqrt', 'log2', 'sqrt',
                   'sqrt', 'sqrt', 'log2', 'sqrt', 'sqrt', 'log2', 'sqrt',
                   'sqrt', 'log2', 'sqrt', 'sqrt', 'log2', 'sqrt', 'log2',
                   'sqrt', 'sqrt', 'log2', 'log2', 'sqrt', 'sqrt', 'log2',
                   'log2', 'log2', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt',
                   'log2', 'sqrt', 'log2', 'log2', 'log2', 'log2', 'sqrt',
                   'log2', 'sqrt', 'log2', 'sqrt', 'sqrt', 'log2', 'sqrt',
                   'sqrt', 'log2', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'sqrt',
                   'log2', 'sqrt', 'sqrt', 'log2', 'log2', 'log2', 'log2',
                   'sqrt', 'log2', 'sqrt', 'log2', 'sqrt', 'log2', 'log2',
                   'sqrt', 'sqrt', 'sqrt', 'sqrt', 'log2', 'log2', 'log2',
                   'log2', 'log2', 'log2', 'log2', 'log2', 'sqrt', 'log2',
                   'log2', 'log2', 'sqrt', 'sqrt', 'sqrt', 'sqrt', 'log2',
                   'sqrt', 'log2', 'sqrt', 'log2', 'log2', 'sqrt', 'sqrt',
                   'sqrt', 'sqrt', 'sqrt', 'sqrt', 'log2', 'log2', 'sqrt',
                   'sqrt', 'sqrt', 'log2', 'log2', 'log2', 'sqrt', 'log2',
                   'sqrt', 'log2', 'log2', 'sqrt', 'sqrt', 'log2', 'sqrt',
                   'log2', 'log2', 'sqrt', 'sqrt', 'log2', 'log2', 'log2',
                   'sqrt', 'sqrt', 'sqrt', 'sqrt', 'log2', 'sqrt', 'log2',
                   'log2', 'log2', 'sqrt', 'log2', 'sqrt', 'log2', 'log2',
                   'log2', 'sqrt', 'sqrt'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__base_estimator__max_leaf_nodes': masked_array(data=[64, 8, 8, 4096, 128, 128, 1024, 512, 2, 32, 256, 8192,
                   2048, 2, 512, 4, 1024, 64, 8192, 2048, 8192, 128, 16,
                   64, None, 2, None, 64, 8, 64, 2048, 2, None, 512, 256,
                   2048, None, 128, None, 512, 128, 8, 32, None, None, 2,
                   8, None, 16384, 256, 512, 2, 64, 64, 32, 8192, 2, 16,
                   None, None, 4096, 8, 16384, 32, 16, 2048, 8, 4, 256,
                   1024, None, 4, None, None, 2048, 8192, 256, None, None,
                   None, 2, 32, None, 2, 8192, 8192, None, 8192, None, 4,
                   128, 64, None, None, 2, None, 32, 8192, 4, 2, 128, 2,
                   None, 512, 4, None, 1024, 8, 2, 128, None, None, 256,
                   2, None, 4, None, 512, 1024, None, 2048, None, None,
                   16384, 1024, 16384, 256, None, 64, 8192, 64, 2, 32,
                   128, 8, 32, 32, 256, 2, 32, 8192, 256, 4, 8192, 16384,
                   8, 16384, 512, 64, 1024],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__base_estimator__max_samples': masked_array(data=[0.7525290224808996, 0.3859080277469972,
                   0.7639749047734716, 0.878998835644445,
                   0.6677698966603746, 0.5580269021150789,
                   0.45097845665316244, 0.07451103080084504,
                   0.40215121327956915, 0.1949648574965221,
                   0.7390607245491705, 0.5594920959917679,
                   0.761074598198586, 0.34838834441177613,
                   0.15169120297752592, 0.8819630962093924,
                   0.45792081952363733, 0.6495392023577913,
                   0.15867467473151764, 0.9263792319555748,
                   0.29458009760913967, 0.4207839948831282,
                   0.3679867883264559, 0.5016388712184234, 1.0,
                   0.3621415994552169, 1.0, 1.0, 0.8872488593231572, 1.0,
                   0.22963304144099922, 0.06045481119532443, 1.0,
                   0.3907980419520002, 0.4168547704821927,
                   0.3433029303776533, 0.05, 0.11726464473370443,
                   0.4513455748496398, 0.723743877823257,
                   0.5177621107015489, 0.1652356269349077,
                   0.8828478617105116, 0.41419928572422177,
                   0.2999951248149385, 0.05, 0.10748065552586547, 0.05,
                   0.11823319333690419, 0.4075625686021834, 1.0, 1.0,
                   0.2950293696296633, 0.9831276830674394,
                   0.5986740817824135, 0.34164983434936047, 0.05,
                   0.15558958214978102, 0.05, 0.05, 0.1612319588358051,
                   0.9746061472074955, 0.05, 0.8755352103796268,
                   0.6951435932516096, 0.07081983274584981,
                   0.9488002903493747, 0.5350352693681951,
                   0.4629808335338564, 0.05, 0.7288495259372036,
                   0.13364740400184588, 0.1844816033910051, 0.05, 1.0,
                   0.05, 0.05, 0.24534492347799625, 0.3170762839572348,
                   0.45897577909699117, 0.5506851348063628, 0.05, 1.0,
                   0.2253334243420495, 0.29159319149877116,
                   0.3470375864740168, 0.9944460555914354,
                   0.7386396523498331, 0.4872336571520421,
                   0.5349723681145876, 0.7360212409597009, 0.05,
                   0.8228985719830768, 0.7076754746039373,
                   0.14816684139327058, 0.5854282702509284,
                   0.6361940595360598, 0.7959620031285802,
                   0.6988705567826781, 0.05, 0.05, 0.43821690551097997,
                   0.10291923834577946, 0.05, 0.23578194119245321,
                   0.0599406183805969, 0.05, 0.8615350943107326,
                   0.49023702280295767, 1.0, 0.6894796281985365,
                   0.37860578821580554, 0.6901942103180086,
                   0.7064695943546171, 1.0, 0.05, 0.4320986687326618,
                   0.2419640635028555, 0.4033562514220227,
                   0.7349285808030386, 0.05, 0.3003898331403859,
                   0.23595284338197747, 0.08577603604912502,
                   0.3391207763376147, 0.5356483222962373,
                   0.6148560819218246, 0.4700697021615109, 0.05, 0.05,
                   0.8509358397122398, 0.05, 1.0, 0.05, 0.05, 0.05,
                   0.1749684346604139, 0.444188034817921, 0.05,
                   0.26973290067231215, 0.05, 0.5100237698516011, 0.05,
                   0.8042928015199367, 0.4796603692590862,
                   0.6939064628963019, 0.635797346075052,
                   0.5503183470486125, 0.5794059223211485,
                   0.5526593753671546],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__base_estimator__min_impurity_decrease': masked_array(data=[0.030446331103650623, 0.06357291018791704,
                   0.05573404230338014, 0.09119288615068838,
                   0.03530838455279714, 0.07852839371424958,
                   0.07338824852688058, 0.038572959098466475,
                   0.059437891359138566, 0.08938380610525196,
                   0.007034998347847101, 0.000293863419489458,
                   0.06655843323853154, 0.1, 0.020109374188879477,
                   0.09767758291277233, 0.00386750164849904,
                   0.00627885202806663, 0.01853939001906833,
                   0.012261006423007119, 0.00490550045829319,
                   0.09686927528441919, 0.01374743702306789,
                   0.01478272798105507, 0.05814441060781114,
                   0.09804264956838274, 0.0, 0.0002877266888722154,
                   0.00918343679842196, 0.005091244704044151,
                   0.007207948852344749, 0.0047471996960205395,
                   0.06920040534982763, 0.0008038852355364622,
                   0.07379056855702108, 0.09999985179590758, 0.1,
                   0.03717606472157949, 0.040523492528939366,
                   0.032245138689122536, 0.04559381604554626,
                   0.0007754873911248206, 0.0757481254279509,
                   0.022257698524112638, 0.012434601037615423,
                   0.0896154092803311, 0.012834933332587232, 0.0,
                   0.06036800016934473, 0.009511176274259674,
                   0.05960499153808816, 0.025391090143258317,
                   0.07087485004412841, 0.09453975161569911,
                   0.03221185023668931, 0.08014791297813552,
                   0.021812088458986936, 0.06891784178649439,
                   0.003804255305996584, 0.0, 0.011102086920459343,
                   0.02874898344768899, 0.0972874054724196,
                   0.08556117433380478, 0.06646401719029277,
                   0.0867402290641367, 0.03490094277291121,
                   0.01728860390537244, 0.04773973964852146, 0.1,
                   0.012509957653720361, 0.08788089404724024,
                   0.02168243152966881, 0.1, 0.04307532937394737, 0.1,
                   0.0, 0.009084535631808737, 0.06820331895530884,
                   0.09311543743527236, 0.1, 0.08119018544644269,
                   0.05921198418252858, 0.050570046668199226, 0.0,
                   0.07872600337627776, 0.08284238379137854,
                   9.759223505243429e-05, 0.01573536095553335,
                   0.035306548257235275, 0.09868744319816143,
                   0.09225697305047373, 0.06277439871700093,
                   0.08967836479396413, 0.07928585684989302,
                   0.06742550757722784, 0.0059248802104598965,
                   0.035264430684055326, 0.016184202376645182, 0.1,
                   0.0696759426458171, 0.051748862007033984,
                   0.006795296740711969, 0.02633335810040994,
                   0.016184254482841356, 0.04538650810999565,
                   0.08405687090376784, 0.05064064174049825,
                   0.06720581268029073, 0.1, 0.09250285118326325,
                   0.036996958670555795, 0.03150040269086963,
                   0.04154907660864228, 0.0020970030054190364,
                   0.004331372719748366, 0.09942188155193347,
                   0.0490335795639538, 0.02817208399278653,
                   0.06729568008882957, 0.030110246824664174, 0.1,
                   0.09935864308013716, 0.07656252631977473, 0.0,
                   0.017632768554644233, 0.059799001115871456,
                   0.07492849945266308, 0.044685264996256684,
                   0.03339238146079473, 0.09346307611283207,
                   0.0808933121244147, 0.06118911005986171,
                   0.04466943481894196, 0.04576592741055295,
                   0.01850942160670957, 0.032030563097526575,
                   0.0759515242788378, 0.02128117023737674,
                   0.07197041054283093, 0.020997019516426994,
                   0.034674896791964886, 0.010771052910217224,
                   0.003692335368957954, 0.0, 0.016330249106158923, 0.0,
                   0.02724117622201245, 0.0027930889009540262,
                   0.02780785059314851],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__base_estimator__min_samples_leaf': masked_array(data=[11, 15, 16, 7, 11, 9, 11, 13, 4, 13, 14, 7, 4, 10, 5,
                   1, 1, 5, 8, 6, 14, 14, 7, 9, 8, 13, 14, 9, 1, 16, 10,
                   2, 7, 13, 1, 5, 1, 7, 6, 2, 3, 7, 3, 3, 6, 16, 4, 16,
                   12, 9, 4, 14, 9, 11, 14, 1, 5, 5, 16, 16, 15, 6, 5, 2,
                   9, 16, 13, 4, 8, 10, 16, 10, 7, 8, 14, 1, 14, 9, 9, 15,
                   7, 1, 6, 6, 5, 5, 5, 8, 3, 7, 13, 8, 6, 11, 14, 9, 6,
                   13, 6, 15, 10, 11, 7, 1, 2, 6, 13, 4, 11, 11, 4, 14,
                   10, 12, 3, 6, 11, 16, 11, 1, 9, 5, 7, 11, 4, 10, 10, 5,
                   11, 6, 1, 16, 9, 12, 3, 12, 16, 4, 7, 9, 8, 3, 13, 3,
                   14, 3, 7, 2, 9, 1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__base_estimator__min_samples_split': masked_array(data=[10, 11, 12, 7, 9, 10, 15, 7, 13, 13, 6, 5, 3, 4, 15,
                   11, 9, 15, 12, 5, 11, 7, 16, 2, 9, 11, 6, 3, 11, 2, 11,
                   16, 2, 13, 11, 8, 16, 6, 12, 4, 5, 11, 6, 13, 6, 16,
                   12, 16, 3, 9, 7, 2, 15, 13, 4, 16, 16, 10, 11, 3, 9,
                   13, 16, 11, 13, 4, 4, 10, 2, 8, 9, 13, 7, 7, 2, 2, 11,
                   16, 13, 14, 14, 2, 9, 10, 11, 11, 5, 16, 15, 14, 10,
                   11, 10, 7, 4, 16, 7, 9, 9, 12, 16, 9, 8, 7, 15, 13, 3,
                   11, 8, 7, 5, 12, 14, 6, 11, 10, 8, 10, 8, 7, 11, 16, 4,
                   2, 14, 6, 13, 10, 7, 12, 13, 11, 8, 7, 8, 11, 10, 15,
                   10, 12, 11, 10, 8, 14, 10, 15, 7, 11, 13, 14],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__base_estimator__min_weight_fraction_leaf': masked_array(data=[0.06341690919792532, 0.4961469999311684,
                   0.1907366164457207, 0.41876509255066696,
                   0.44119524363127155, 0.28230018657058265,
                   0.3289263786485137, 0.2863782125617293,
                   0.22220090987420965, 0.00992377724082605,
                   0.07398502005060166, 0.04787343986216327,
                   0.4885678022943914, 0.5, 0.45287619563992354,
                   0.19783076009792872, 0.4773495562957836,
                   0.3059682330495639, 0.3663565997652187,
                   0.319030439248628, 0.3311493404916903,
                   0.27835486753996047, 0.27351688142150576,
                   0.09398615352925545, 0.2037090655936749,
                   0.12096565897171462, 0.5, 0.2782531234587482,
                   0.15976678757389523, 6.549049926463594e-06,
                   0.21105023855712451, 0.0, 0.2390387873626898,
                   0.0833908003627724, 0.5, 0.2974551328830462, 0.5,
                   0.36998720731865015, 0.06015499653905454,
                   0.4754070588737397, 0.3640740113614404,
                   0.02210477003265904, 0.3138071689572564,
                   0.032875542487693844, 0.24132546928728102,
                   0.08239504916468121, 0.17741132151762987, 0.0,
                   0.30861743987602624, 0.31204980446145264,
                   0.3411137464101451, 0.5, 0.22097711015474986,
                   0.4488833660839127, 0.10744779729834811, 0.0, 0.0,
                   0.19395288260868035, 0.29208912104902757, 0.0,
                   0.1769653624301375, 0.4587949058586799,
                   0.4882467726610227, 0.45828262849965984,
                   0.25024769295724925, 0.10520538440481296,
                   0.15682163856116865, 0.16296559354223678,
                   0.47941225552748373, 0.0, 0.11100660529046438,
                   0.2702159636614923, 0.025002389093346816, 0.0,
                   0.48607827836570533, 0.0, 0.0, 0.11344609997372015,
                   0.3781538120925332, 0.09178860355159946,
                   0.20182213719383246, 0.1233297014575763, 0.5,
                   0.04848112188347236, 0.4380339436477175,
                   0.0005658792436429435, 0.23468487210927952,
                   0.16438998431596463, 0.10869786644862542,
                   0.3933259919573702, 0.15149049656777505,
                   0.044457263510632374, 0.4253981286828217,
                   0.24833862165331064, 0.3467674965293372,
                   0.4135319372961539, 0.26929780406855724,
                   0.3788186375398676, 0.14474338356682273,
                   0.015069239000375633, 0.3489567595068719,
                   0.4046725295055145, 0.342925773273852,
                   0.46805575315109144, 0.4159662268634556,
                   0.29590319877589977, 0.19489969013832154,
                   0.2405792078244263, 0.3285057801219432,
                   0.4691330521534413, 0.2960150613476388,
                   0.22134478209966982, 0.34398384258461506,
                   0.14776970993172614, 0.3822242731624006,
                   0.46668056468032515, 0.29327442840699247,
                   0.44274735405416843, 0.4994306301105256,
                   0.11078137585057214, 0.353320807718024, 0.0,
                   0.1439184600449945, 0.11492821300153394,
                   0.3269652747567043, 0.329771349276854,
                   0.04993763624919665, 0.19903048597210288,
                   0.23281604685287247, 0.07240844903713553,
                   0.07599726470061545, 0.19206717525525435,
                   0.39202382493424864, 0.29457535959688946,
                   0.002952584104931036, 0.2585663384158811,
                   0.4022204450835274, 0.28977899984793454,
                   0.49048946814787786, 0.2023401778176587,
                   0.3670463831561968, 0.0013391829146103813,
                   0.4342254261207923, 0.04511612207866157,
                   0.0502186757294564, 0.04671742951493874,
                   0.11748429853407238, 0.18787783792034668,
                   0.05345019235718892, 0.37129716295246734],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__base_estimator__n_estimators': masked_array(data=[1863, 7691, 2059, 6143, 2630, 321, 6156, 6934, 1334,
                   2441, 3155, 2048, 4282, 100, 4356, 7809, 8854, 3618,
                   6378, 9479, 508, 2311, 2540, 4546, 8793, 10000, 100,
                   8894, 100, 10000, 2812, 10000, 10000, 100, 2747, 3583,
                   100, 4974, 6523, 5541, 5102, 4031, 10000, 3825, 10000,
                   100, 9088, 100, 100, 5997, 8248, 100, 2250, 4850, 9137,
                   100, 10000, 5683, 100, 100, 663, 5338, 100, 100, 9843,
                   7855, 3807, 4258, 9817, 2570, 5129, 6405, 5310, 9630,
                   10000, 7277, 10000, 3092, 2785, 2884, 5560, 8357, 5332,
                   9719, 2970, 2512, 3778, 4058, 100, 3971, 6384, 2984,
                   1170, 3116, 9901, 2456, 6276, 8590, 5775, 10000, 5981,
                   179, 1417, 525, 6929, 8152, 6269, 6137, 1325, 8808,
                   6489, 6419, 2170, 4787, 3272, 1922, 9097, 9807, 3589,
                   2381, 4549, 100, 4952, 1107, 2911, 2883, 3012, 671,
                   1831, 2202, 1763, 4094, 9126, 8307, 6337, 8020, 2581,
                   7450, 3579, 7771, 4793, 7188, 1327, 7244, 2373, 9167,
                   7343, 1268, 3548, 6916],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__base_estimator__n_jobs': masked_array(data=[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__base_estimator__oob_score': masked_array(data=[False, True, False, True, False, True, False, False,
                   False, False, False, True, False, False, True, True,
                   False, False, True, False, False, False, False, True,
                   True, True, False, False, False, True, False, False,
                   True, True, True, True, False, False, True, True,
                   False, False, False, True, True, True, False, False,
                   True, False, True, False, False, False, True, True,
                   False, True, False, True, True, True, False, False,
                   True, False, False, True, True, False, True, False,
                   False, True, False, False, False, True, False, True,
                   True, True, True, True, False, True, True, True, False,
                   True, False, True, True, True, True, False, False,
                   True, True, True, False, False, True, True, True,
                   False, False, True, False, True, True, False, False,
                   True, True, False, False, True, True, False, True,
                   True, False, True, False, True, False, True, True,
                   True, False, True, True, True, False, False, False,
                   True, False, True, False, True, True, True, True,
                   False, True, False, False, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__base_estimator__warm_start': masked_array(data=[True, False, False, False, True, False, True, True,
                   False, True, True, True, False, False, False, True,
                   False, True, False, False, False, True, False, False,
                   True, False, True, False, False, True, True, False,
                   True, True, False, False, False, True, False, True,
                   False, False, True, False, True, True, False, True,
                   False, False, True, False, True, True, False, False,
                   True, False, False, True, False, True, False, True,
                   True, True, True, False, True, False, True, True, True,
                   False, True, False, True, True, False, False, False,
                   False, True, False, False, False, True, True, True,
                   False, True, False, False, False, False, True, False,
                   True, False, False, True, True, False, True, True,
                   True, False, True, True, True, False, True, False,
                   True, True, False, False, False, True, False, True,
                   True, False, False, True, True, True, True, False,
                   True, False, True, True, True, False, False, False,
                   True, True, False, True, False, True, False, True,
                   True, True, True, True, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__criterion': masked_array(data=['threshold', 'k_best', 'threshold', 'k_best', 'k_best',
                   'threshold', 'k_best', 'threshold', 'threshold',
                   'k_best', 'k_best', 'k_best', 'threshold', 'threshold',
                   'threshold', 'k_best', 'k_best', 'threshold',
                   'threshold', 'threshold', 'threshold', 'k_best',
                   'threshold', 'k_best', 'threshold', 'k_best',
                   'threshold', 'threshold', 'k_best', 'threshold',
                   'threshold', 'k_best', 'threshold', 'threshold',
                   'k_best', 'k_best', 'k_best', 'k_best', 'threshold',
                   'threshold', 'k_best', 'k_best', 'k_best', 'k_best',
                   'k_best', 'threshold', 'k_best', 'threshold',
                   'threshold', 'threshold', 'k_best', 'threshold',
                   'k_best', 'k_best', 'threshold', 'k_best', 'k_best',
                   'threshold', 'threshold', 'k_best', 'k_best', 'k_best',
                   'k_best', 'k_best', 'threshold', 'k_best', 'k_best',
                   'k_best', 'threshold', 'threshold', 'k_best',
                   'threshold', 'k_best', 'threshold', 'threshold',
                   'threshold', 'threshold', 'threshold', 'threshold',
                   'k_best', 'threshold', 'threshold', 'k_best', 'k_best',
                   'threshold', 'k_best', 'threshold', 'k_best',
                   'threshold', 'k_best', 'threshold', 'threshold',
                   'k_best', 'k_best', 'threshold', 'threshold',
                   'threshold', 'threshold', 'k_best', 'k_best', 'k_best',
                   'k_best', 'k_best', 'k_best', 'k_best', 'k_best',
                   'threshold', 'k_best', 'threshold', 'threshold',
                   'threshold', 'threshold', 'threshold', 'k_best',
                   'k_best', 'k_best', 'threshold', 'threshold', 'k_best',
                   'threshold', 'k_best', 'threshold', 'threshold',
                   'threshold', 'threshold', 'threshold', 'threshold',
                   'threshold', 'k_best', 'k_best', 'k_best', 'threshold',
                   'k_best', 'k_best', 'threshold', 'k_best', 'threshold',
                   'threshold', 'k_best', 'threshold', 'threshold',
                   'threshold', 'k_best', 'threshold', 'threshold',
                   'k_best', 'threshold', 'threshold', 'threshold',
                   'k_best'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__k_best': masked_array(data=[13, 11, 4, 2, 8, 15, 7, 2, 15, 10, 14, 16, 6, 13, 10,
                   3, 3, 11, 4, 5, 3, 10, 11, 2, 5, 14, 1, 8, 13, 16, 4,
                   16, 1, 3, 10, 7, 1, 9, 2, 3, 7, 10, 3, 1, 2, 1, 14, 7,
                   4, 8, 6, 7, 14, 15, 16, 12, 16, 5, 1, 16, 7, 14, 10,
                   10, 7, 12, 9, 15, 3, 3, 1, 15, 16, 1, 1, 1, 16, 13, 1,
                   14, 1, 1, 10, 11, 4, 1, 16, 9, 6, 1, 10, 1, 16, 3, 3,
                   1, 13, 10, 14, 10, 12, 10, 14, 11, 2, 12, 4, 2, 2, 16,
                   2, 1, 9, 10, 7, 10, 3, 13, 2, 13, 3, 8, 15, 12, 9, 6,
                   3, 2, 14, 15, 1, 8, 4, 4, 4, 5, 12, 4, 10, 15, 15, 9,
                   10, 16, 9, 5, 8, 13, 13, 1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__max_iter': masked_array(data=[1, 13, 13, 12, 14, 10, 8, 8, 2, 1, 1, 3, 5, None, 10,
                   4, 12, 3, 15, 15, 14, 7, 4, 11, 3, 9, None, 7, 7, 0, 7,
                   0, None, 11, 5, 5, None, 5, 15, 4, 14, 14, 13, None, 8,
                   6, 4, None, 13, 2, 14, 0, 4, 1, 6, 0, 3, 9, None, 0, 3,
                   11, 11, 13, 10, 0, 11, 12, 11, 14, 9, 14, 2, None, 2,
                   13, 0, 7, 3, 2, 4, 2, 7, 6, 6, 14, 8, 0, None, 15, 9,
                   8, 7, 15, 1, 11, 9, 9, 14, 10, 11, 4, 13, 12, 7, 9, 7,
                   9, 9, 3, 7, 4, 7, 12, 11, 14, 1, 11, 13, 3, 10, 8, 6,
                   1, None, 15, 1, 4, 15, 10, 12, 6, 14, 15, 0, 5, 11, 14,
                   1, 7, 4, 14, 5, 13, 2, 13, 10, 10, 9, 0],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_classifier__threshold': masked_array(data=[0.7461931799185204, 0.576984385671897,
                   0.7176849201271599, 0.5820526954409315,
                   0.6980660619814627, 0.6192048662261642,
                   0.7196389271131204, 0.6747797868496723,
                   0.7321500061012368, 0.5071560822833452,
                   0.5276351568122943, 0.6582521482472684,
                   0.5772838097262213, 0.6447284251243098,
                   0.7263678306315418, 0.5067355135699181,
                   0.5196045015965995, 0.5482600829069815,
                   0.5818422782591451, 0.6040685121315511,
                   0.5943256053942098, 0.696985575443016,
                   0.6301253200137882, 0.716776835633602,
                   0.6802684797093344, 0.6435367222931767, 0.5,
                   0.648980435877566, 0.6878598988059015, 0.5,
                   0.5507299505259631, 0.6567136266111155,
                   0.662945542635232, 0.556255058289241, 0.5,
                   0.5009831834633237, 0.75, 0.738025383752136,
                   0.5229139154283674, 0.6382842261444804,
                   0.5039046188914431, 0.7470834202652391,
                   0.6196423625114574, 0.5316958303541018,
                   0.5127492288329669, 0.75, 0.6651308687988673, 0.5,
                   0.5292117169152273, 0.637578752437232,
                   0.7448436870139978, 0.75, 0.5076529319852232,
                   0.646793101045839, 0.698894464718279,
                   0.6806769397080243, 0.7394942748203954,
                   0.6585030038772779, 0.6156237012419106, 0.5,
                   0.6687636904693868, 0.7023529621646156,
                   0.6506328799037688, 0.6696338457579569,
                   0.6712202178543196, 0.6873786686099352,
                   0.7417832209057583, 0.6154799335495321,
                   0.5731614960966808, 0.539725217869334,
                   0.5790478841304313, 0.7194785597195084,
                   0.5688624631018486, 0.5, 0.722484043633831,
                   0.699299116414055, 0.5962230639547501,
                   0.6402005830780368, 0.5363314117678512,
                   0.6371041931930845, 0.7445258593772852, 0.75,
                   0.582087660712409, 0.559110383543598,
                   0.6939682308529725, 0.5329058827535326,
                   0.5024546745336296, 0.5913679486225112,
                   0.6242300938650717, 0.6322794080728061,
                   0.6138455917140206, 0.5801386214097237,
                   0.695809626398972, 0.5323467617225879,
                   0.7132178019131898, 0.5794437359724499,
                   0.5368532636614686, 0.7289458772930786,
                   0.5531904637151288, 0.5924057994180969,
                   0.5750041009918919, 0.5331921367256922,
                   0.5389879048701982, 0.7295035575751783,
                   0.624460472798687, 0.6126015996355788,
                   0.5601549438268484, 0.6647167144070352,
                   0.7367655904384736, 0.5884999463135886,
                   0.6428594188334144, 0.7206803968165728,
                   0.5166810076260174, 0.695266173469599, 0.5,
                   0.7448737212686325, 0.5597119450625194,
                   0.5709157963552158, 0.711781540936443,
                   0.6262488671453987, 0.5161577624283021,
                   0.6935153371094613, 0.7302823179178402,
                   0.5537914188456822, 0.5790123113953528,
                   0.691917546724874, 0.7385919223347245,
                   0.5865266384071282, 0.5484312885049366,
                   0.6374022988400081, 0.583907810634088,
                   0.7498467571851914, 0.5659213235926319,
                   0.7013981286046466, 0.689391793236083,
                   0.6663745598694407, 0.6604631032121757,
                   0.5777201178387612, 0.5434147863587463,
                   0.6650383050403482, 0.5301918700440453,
                   0.5119864559382111, 0.588979762330883,
                   0.7011959788522081, 0.6509551494278173,
                   0.6316842781077937, 0.7043736509837389,
                   0.6464344327357384, 0.6363685216501033,
                   0.5776055040110198],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_dimension_reduction': masked_array(data=[SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(), SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(PCA)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)(),
                   SupressParameter(SelectKBest)()],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_dimension_reduction__k': masked_array(data=[3, 91, 54, 127, 9, 138, 4, 60, 51, 68, 145, 8, 63, 73,
                   113, 11, 33, 85, 16, 47, 131, 82, 84, 35, 82, 86, 111,
                   147, 145, 150, 83, 150, 36, 68, 143, 2, 2, 3, 41, 102,
                   31, 103, 69, 41, 52, 121, 17, 29, 17, 81, 5, 150, 38,
                   21, 145, 6, 150, 55, 150, 150, 60, 146, 62, 80, 122,
                   90, 37, 32, 85, 39, 22, 133, 104, 2, 150, 2, 2, 129,
                   132, 58, 45, 2, 108, 91, 2, 27, 138, 94, 82, 53, 105,
                   2, 32, 43, 69, 53, 4, 35, 78, 100, 20, 65, 21, 76, 52,
                   129, 13, 107, 84, 131, 147, 59, 95, 77, 32, 38, 98, 32,
                   52, 150, 113, 76, 63, 14, 150, 54, 117, 114, 24, 54,
                   46, 105, 149, 144, 82, 101, 93, 50, 2, 96, 126, 145,
                   38, 2, 23, 79, 45, 57, 100, 123],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_dimension_reduction__n_components': masked_array(data=[127, 38, 129, 55, 143, 92, 19, 71, 57, 138, 94, 39, 48,
                   150, 103, 34, 115, 103, 120, 118, 111, 6, 27, 57, 63,
                   4, 150, 117, 28, 150, 149, 2, 150, 103, 72, 2, 2, 76,
                   83, 102, 45, 55, 28, 149, 111, 48, 34, 150, 127, 45, 5,
                   150, 67, 44, 89, 34, 44, 133, 126, 150, 148, 52, 150,
                   120, 140, 2, 125, 7, 111, 150, 148, 105, 87, 150, 150,
                   150, 131, 13, 26, 96, 144, 150, 145, 94, 118, 44, 88,
                   136, 137, 91, 41, 150, 94, 104, 145, 107, 117, 26, 148,
                   2, 120, 64, 4, 12, 129, 127, 87, 27, 138, 88, 93, 146,
                   142, 141, 106, 60, 41, 120, 6, 93, 92, 67, 57, 118,
                   150, 31, 40, 83, 150, 150, 90, 2, 68, 20, 2, 150, 150,
                   27, 14, 122, 130, 30, 122, 74, 61, 138, 64, 74, 39,
                   111],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_dimension_reduction__n_oversamples': masked_array(data=[71, 48, 66, 22, 65, 85, 83, 26, 50, 54, 31, 0, 83, 100,
                   97, 20, 74, 56, 22, 95, 88, 99, 72, 98, 3, 71, 83, 83,
                   32, 0, 67, 2, 11, 12, 38, 16, 100, 84, 65, 99, 0, 25,
                   100, 85, 39, 100, 74, 0, 55, 16, 6, 0, 90, 98, 40, 11,
                   0, 1, 95, 0, 36, 35, 51, 22, 46, 100, 27, 31, 24, 41,
                   46, 50, 76, 98, 100, 0, 78, 54, 96, 90, 74, 0, 9, 66,
                   14, 55, 7, 60, 1, 51, 86, 26, 90, 55, 5, 80, 16, 47,
                   74, 43, 47, 12, 34, 15, 25, 44, 81, 53, 61, 79, 86, 31,
                   26, 33, 10, 57, 32, 10, 84, 79, 1, 6, 43, 30, 13, 38,
                   65, 53, 48, 21, 21, 83, 0, 0, 7, 51, 77, 12, 79, 89,
                   57, 47, 87, 16, 28, 69, 0, 5, 32, 72],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_dimension_reduction__power_iteration_normalizer': masked_array(data=['QR', 'auto', 'none', 'QR', 'LU', 'none', 'LU', 'QR',
                   'QR', 'QR', 'QR', 'LU', 'LU', 'none', 'QR', 'auto',
                   'auto', 'QR', 'auto', 'auto', 'auto', 'LU', 'auto',
                   'none', 'LU', 'QR', 'none', 'none', 'QR', 'LU', 'auto',
                   'LU', 'LU', 'auto', 'QR', 'none', 'none', 'LU', 'QR',
                   'auto', 'none', 'QR', 'LU', 'LU', 'none', 'QR', 'none',
                   'auto', 'QR', 'none', 'none', 'none', 'LU', 'none',
                   'QR', 'QR', 'none', 'LU', 'auto', 'none', 'none', 'QR',
                   'auto', 'auto', 'auto', 'LU', 'QR', 'auto', 'auto',
                   'LU', 'auto', 'LU', 'none', 'QR', 'auto', 'LU', 'none',
                   'QR', 'none', 'none', 'LU', 'LU', 'QR', 'QR', 'QR',
                   'auto', 'QR', 'auto', 'none', 'QR', 'none', 'QR',
                   'auto', 'LU', 'auto', 'QR', 'auto', 'QR', 'auto', 'QR',
                   'LU', 'QR', 'auto', 'QR', 'auto', 'QR', 'none', 'LU',
                   'auto', 'QR', 'none', 'QR', 'QR', 'QR', 'QR', 'auto',
                   'none', 'auto', 'auto', 'LU', 'auto', 'QR', 'none',
                   'none', 'none', 'none', 'QR', 'LU', 'auto', 'QR',
                   'auto', 'auto', 'QR', 'QR', 'none', 'auto', 'LU',
                   'none', 'none', 'LU', 'QR', 'LU', 'auto', 'QR', 'QR',
                   'auto', 'none', 'QR', 'auto', 'auto'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_dimension_reduction__score_func': masked_array(data=['f_classif', 'f_classif', 'f_classif', 'f_classif',
                   'chi2', 'mutual_info_classif', 'chi2',
                   'mutual_info_classif', 'chi2', 'mutual_info_classif',
                   'f_classif', 'chi2', 'chi2', 'chi2', 'chi2', 'chi2',
                   'f_classif', 'f_classif', 'chi2', 'chi2', 'f_classif',
                   'mutual_info_classif', 'f_classif', 'f_classif',
                   'f_classif', 'f_classif', 'f_classif', 'chi2',
                   'mutual_info_classif', 'chi2', 'f_classif', 'chi2',
                   'chi2', 'mutual_info_classif', 'f_classif',
                   'mutual_info_classif', 'mutual_info_classif',
                   'mutual_info_classif', 'mutual_info_classif',
                   'mutual_info_classif', 'f_classif',
                   'mutual_info_classif', 'chi2', 'mutual_info_classif',
                   'mutual_info_classif', 'chi2', 'f_classif', 'chi2',
                   'f_classif', 'f_classif', 'chi2',
                   'mutual_info_classif', 'chi2', 'mutual_info_classif',
                   'mutual_info_classif', 'f_classif',
                   'mutual_info_classif', 'chi2', 'f_classif',
                   'mutual_info_classif', 'chi2', 'f_classif',
                   'mutual_info_classif', 'f_classif', 'chi2',
                   'mutual_info_classif', 'chi2', 'f_classif',
                   'f_classif', 'chi2', 'mutual_info_classif',
                   'mutual_info_classif', 'mutual_info_classif',
                   'mutual_info_classif', 'chi2', 'chi2',
                   'mutual_info_classif', 'chi2', 'mutual_info_classif',
                   'chi2', 'f_classif', 'chi2', 'chi2', 'chi2', 'chi2',
                   'mutual_info_classif', 'chi2', 'f_classif',
                   'f_classif', 'chi2', 'chi2', 'chi2', 'chi2',
                   'f_classif', 'mutual_info_classif', 'f_classif',
                   'f_classif', 'f_classif', 'chi2',
                   'mutual_info_classif', 'chi2', 'mutual_info_classif',
                   'f_classif', 'f_classif', 'f_classif', 'f_classif',
                   'mutual_info_classif', 'chi2', 'f_classif', 'chi2',
                   'f_classif', 'mutual_info_classif', 'chi2',
                   'mutual_info_classif', 'f_classif', 'chi2',
                   'f_classif', 'f_classif', 'mutual_info_classif',
                   'chi2', 'f_classif', 'chi2', 'mutual_info_classif',
                   'mutual_info_classif', 'mutual_info_classif',
                   'f_classif', 'chi2', 'f_classif', 'f_classif',
                   'f_classif', 'mutual_info_classif', 'chi2',
                   'mutual_info_classif', 'f_classif', 'chi2', 'chi2',
                   'f_classif', 'f_classif', 'f_classif', 'f_classif',
                   'mutual_info_classif', 'f_classif',
                   'mutual_info_classif', 'mutual_info_classif',
                   'mutual_info_classif', 'chi2', 'mutual_info_classif',
                   'f_classif', 'chi2', 'f_classif'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_dimension_reduction__svd_solver': masked_array(data=['auto', 'full', 'full', 'full', 'full', 'auto', 'full',
                   'randomized', 'randomized', 'auto', 'full', 'auto',
                   'full', 'arpack', 'full', 'auto', 'auto', 'auto',
                   'arpack', 'randomized', 'full', 'arpack', 'full',
                   'full', 'full', 'auto', 'randomized', 'randomized',
                   'auto', 'randomized', 'full', 'arpack', 'randomized',
                   'full', 'randomized', 'auto', 'arpack', 'auto', 'auto',
                   'auto', 'auto', 'auto', 'full', 'randomized', 'auto',
                   'arpack', 'randomized', 'randomized', 'arpack',
                   'randomized', 'full', 'randomized', 'arpack',
                   'randomized', 'auto', 'arpack', 'arpack', 'arpack',
                   'full', 'arpack', 'auto', 'randomized', 'arpack',
                   'arpack', 'full', 'arpack', 'arpack', 'full', 'full',
                   'arpack', 'full', 'auto', 'auto', 'arpack', 'full',
                   'arpack', 'full', 'full', 'arpack', 'full', 'full',
                   'arpack', 'auto', 'arpack', 'arpack', 'full', 'arpack',
                   'auto', 'auto', 'full', 'full', 'auto', 'auto', 'auto',
                   'auto', 'randomized', 'auto', 'full', 'auto', 'auto',
                   'arpack', 'auto', 'arpack', 'arpack', 'arpack',
                   'arpack', 'randomized', 'full', 'arpack', 'auto',
                   'randomized', 'auto', 'auto', 'full', 'full',
                   'randomized', 'randomized', 'full', 'arpack',
                   'randomized', 'full', 'arpack', 'full', 'full', 'full',
                   'randomized', 'arpack', 'auto', 'arpack', 'full',
                   'full', 'arpack', 'auto', 'auto', 'auto', 'auto',
                   'full', 'arpack', 'auto', 'full', 'randomized', 'full',
                   'auto', 'auto', 'auto', 'auto', 'full', 'arpack',
                   'arpack', 'randomized'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_dimension_reduction__tol': masked_array(data=[14.505822191633484, -66.1446800889253,
                   39.48084247414212, 17.36023874330428,
                   89.10751651548225, -30.13527938354551,
                   -34.212208148775005, -27.769332523606565,
                   -43.11696946241853, -15.281716053696698,
                   84.55598677022778, 22.806552944470553,
                   -10.390464119269623, 100.0, -17.46738641814352,
                   -54.706265888200036, 15.094327458575904,
                   -56.2666540257133, -15.477597655044335,
                   80.89764710513782, 6.562740662150119,
                   -25.610612063839127, 94.37615522226429,
                   -90.5356233173597, 72.80682283400517,
                   76.98193342032039, -100.0, -4.583870547804423,
                   44.410487561317325, 100.0, -23.831718999623902,
                   31.745742191700458, 50.05791644807235,
                   -27.072152571022073, -16.60893333021167, -100.0,
                   -100.0, 94.67619991600696, -100.0, 85.68104561547597,
                   50.52226819424945, 100.0, -56.381202690730895,
                   9.228526100784677, -4.749354716034631,
                   78.79725858094491, 53.94571942701893, -100.0,
                   -18.12536234529948, -93.33429363678974,
                   -78.42520077754514, 100.0, -30.442358452230238,
                   35.55633717807834, -18.273251726003423,
                   19.993631660824036, -100.0, -99.9717759480049,
                   14.53256695044496, 100.0, 91.12548293899638,
                   -82.01274366533472, -3.2355603955794123,
                   -38.076373846467284, -67.19047558425405,
                   2.086439629883415, -13.966028383947389,
                   38.885140428553115, 19.083617745831475,
                   -2.3970810133078686, 59.18813333283305,
                   -55.22635501840269, -48.473845115792045, -100.0,
                   -26.15760159937956, 15.563625357346382, -100.0,
                   75.58868516271244, 65.27468802683342,
                   -41.50748869279626, 86.47247979077463,
                   2.9248887479690353, -45.630876442319014,
                   -65.82832317882853, 54.06708059271244,
                   54.104388278982185, -90.15157546177838,
                   -9.09700647607724, -53.78398867709685,
                   -34.953997394864544, -11.579984023645935,
                   -64.05546616970916, 73.54318770756694,
                   83.21122186980782, -85.67739653658641,
                   -84.53919525548167, 11.851643244692028,
                   -3.0443868488617625, 99.76311941147159,
                   24.32318023711852, -53.78217445794018,
                   95.12740572838737, 30.12628761652948,
                   99.41266486572923, 78.53497748580992,
                   -66.03440332902542, -22.046648912880258,
                   -44.8012154259851, 63.88114613069794,
                   3.048178137280317, -49.01517186878822,
                   -14.925266092351109, -5.2829495572529055,
                   89.72728858988168, -65.27661811983074,
                   39.79591795505226, 92.91182025010602,
                   -56.90622102755683, 82.65920959199119,
                   -90.92805706185653, 7.641145977661523,
                   -69.2972297130994, 100.0, 33.674344350337606,
                   -96.35119047176532, 89.70775705541143,
                   -0.43009892698020735, 88.14607703747242,
                   -45.75558959567667, -79.98372367361185,
                   43.91660730579585, 25.60060847071803,
                   2.565195062524168, 2.006760008308646,
                   -25.82976168168024, 56.35557303376419,
                   83.05992901180645, -54.037667191177206,
                   -39.40045485592544, 29.669189417648056,
                   -41.65166828732359, -2.8178118477143386, -100.0,
                   25.392565218131423, -40.94849697596338,
                   63.362732938819136, -59.80402098778684,
                   -79.14581625944254, 65.17185370939706,
                   -85.12473757304606],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_dimension_reduction__whiten': masked_array(data=[False, False, True, True, True, True, True, True,
                   False, True, False, False, False, True, False, False,
                   True, True, True, True, False, False, True, False,
                   True, False, False, True, True, False, False, False,
                   True, True, False, False, False, False, False, False,
                   False, False, False, False, False, False, True, False,
                   True, True, True, True, True, False, True, False, True,
                   False, False, False, False, True, False, True, True,
                   False, False, False, False, False, False, False, True,
                   False, True, False, False, True, False, False, True,
                   False, False, False, False, False, True, True, False,
                   False, True, False, False, True, False, False, False,
                   False, False, False, True, False, True, True, True,
                   True, False, False, True, True, False, False, True,
                   False, False, False, False, False, False, False, True,
                   False, False, False, False, True, True, False, False,
                   True, False, False, False, True, False, True, True,
                   False, False, False, True, True, True, True, False,
                   True, True, False, False, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_imputer': masked_array(data=[SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(IterativeImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(SimpleImputer)(),
                   SupressParameter(KNNImputer)(),
                   SupressParameter(KNNImputer)()],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_imputer__add_indicator': masked_array(data=[False, False, False, True, True, False, True, False,
                   True, False, False, True, False, True, True, True,
                   False, False, True, False, False, False, True, False,
                   False, True, False, True, False, False, True, True,
                   False, False, True, True, True, False, True, True,
                   False, True, True, False, True, True, True, True, True,
                   True, False, False, True, True, False, True, True,
                   False, False, False, True, False, True, False, True,
                   False, True, True, True, True, False, False, True,
                   True, True, False, False, False, True, False, True,
                   False, False, False, False, True, True, True, False,
                   False, False, True, False, True, False, False, True,
                   False, False, True, True, False, True, True, False,
                   False, True, False, True, False, False, False, True,
                   False, False, True, False, True, False, False, True,
                   True, False, True, False, True, True, True, True,
                   False, False, True, False, False, True, True, True,
                   True, False, True, False, False, False, False, True,
                   True, False, False, False, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_imputer__fill_value': masked_array(data=[-65.38656121406297, -84.6324083461307,
                   -24.939879942221395, 21.461708627559346,
                   44.23723927030579, -52.03892714828605,
                   -2.758839732480766, -72.03413151791047,
                   83.33728468472196, 76.65534972258382,
                   -21.337687372972965, 92.00442273840912,
                   -27.880001567224866, -100.0, -14.951975164189776,
                   77.20200742510349, 71.18384759432789,
                   -58.42554307940181, 25.45711985214365,
                   -61.4028915900697, 13.089493754796266,
                   86.9474318289119, -10.890462005547505,
                   -9.095665335808533, 24.745078667097587,
                   -9.641031453810854, -77.95010736305854,
                   86.60643951111473, -3.3381827375441873, -100.0,
                   88.8686539228016, 100.0, -26.60276568139473,
                   92.74653983123002, 93.62992605234118,
                   99.99981441908861, 100.0, 87.10610964508533,
                   -24.036145720971746, -65.39193030740913,
                   63.16427936862641, 96.27835043079028,
                   26.82836088560873, -75.37875120243135,
                   68.58876108097911, 16.192606738522343,
                   63.61933427752507, 100.0, -15.830159874879442,
                   80.55750594995905, 0.4823081617360714,
                   -64.82263955073182, -51.987377346458985,
                   -9.11919533266088, -72.24845070556016,
                   67.9018447383203, 85.99816295976945,
                   -60.35693918824593, 53.024604729348766, -100.0,
                   -37.782638604148424, 48.65843239709133,
                   17.353632831278404, -51.68329242946736,
                   -51.03671494334209, 100.0, -31.652572871548955,
                   44.90690419476118, 3.8287461444173516,
                   -42.39969115436172, -84.98060713784159,
                   46.93443165364164, -67.06211809065985, -100.0,
                   59.99370470365369, -100.0, 100.0, 99.78877390752501,
                   61.65740946179429, -26.25937492008954,
                   16.002748336160693, -100.0, -27.486597140595194,
                   57.38328969334617, 6.107494371338021,
                   -31.76221496741259, 84.2665286235027,
                   66.28847477138675, -20.35690951849574,
                   48.42855039247249, -51.923132350552265,
                   -4.554979933174764, 15.74688026064004,
                   -22.420290830788986, -83.14834821773962,
                   42.76022404112112, 1.889355423605906, 64.9414680909644,
                   -44.18520721259775, 10.775174133229172,
                   40.61447164464809, 81.46250298320905,
                   -86.35859949552079, -28.854880293943935,
                   22.0000480938249, 90.85084592396345, 7.263163219754489,
                   -84.33775398385326, 10.15807123967511,
                   54.50973434711713, -88.79859137620724,
                   33.28062578472378, -57.583402533067925,
                   41.98924333012863, 46.7523692824756,
                   -15.423151339564598, 55.25600928597322,
                   -32.430351584200594, 53.80613423140258, -100.0,
                   36.18474604289196, -51.26710463251282,
                   -30.795876112886972, -24.161172157807812,
                   49.90323364232944, -68.74614997194757,
                   80.50366865426915, -6.667662582879359,
                   -5.162423465378808, -18.995158570281248,
                   76.09999124542705, 51.15545951029665,
                   31.666508580323296, -22.201921745957293,
                   -38.981551222444985, 79.81601919254962,
                   -9.880098133128797, -8.265818411768578,
                   -53.285051116712054, -22.824788690850426,
                   3.2817753171144943, 99.8228102228415,
                   -23.89137506093401, 37.057780944348565,
                   68.1370182783993, 65.12929107820275,
                   -20.979688019389258, 69.02475978385269,
                   93.57669632156279, -63.36325963559602],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_imputer__imputation_order': masked_array(data=['ascending', 'arabic', 'descending', 'random',
                   'random', 'random', 'ascending', 'arabic',
                   'descending', 'ascending', 'roman', 'random',
                   'descending', 'arabic', 'arabic', 'random',
                   'ascending', 'arabic', 'ascending', 'ascending',
                   'roman', 'descending', 'random', 'roman', 'random',
                   'roman', 'arabic', 'random', 'roman', 'roman',
                   'descending', 'roman', 'ascending', 'descending',
                   'random', 'roman', 'arabic', 'descending', 'ascending',
                   'arabic', 'ascending', 'descending', 'ascending',
                   'arabic', 'roman', 'descending', 'random', 'roman',
                   'descending', 'arabic', 'arabic', 'roman', 'random',
                   'roman', 'arabic', 'roman', 'roman', 'descending',
                   'roman', 'roman', 'descending', 'random', 'descending',
                   'descending', 'descending', 'descending', 'roman',
                   'random', 'ascending', 'ascending', 'random', 'arabic',
                   'descending', 'arabic', 'ascending', 'arabic',
                   'ascending', 'random', 'random', 'ascending', 'roman',
                   'ascending', 'arabic', 'ascending', 'descending',
                   'descending', 'random', 'random', 'random', 'roman',
                   'descending', 'descending', 'roman', 'ascending',
                   'roman', 'random', 'arabic', 'random', 'ascending',
                   'random', 'random', 'arabic', 'roman', 'descending',
                   'random', 'arabic', 'descending', 'roman', 'ascending',
                   'roman', 'random', 'roman', 'ascending', 'arabic',
                   'descending', 'random', 'roman', 'ascending',
                   'descending', 'ascending', 'descending', 'random',
                   'descending', 'ascending', 'roman', 'ascending',
                   'ascending', 'roman', 'arabic', 'random', 'ascending',
                   'arabic', 'arabic', 'descending', 'roman', 'random',
                   'descending', 'random', 'arabic', 'random',
                   'ascending', 'random', 'roman', 'random', 'roman',
                   'descending', 'descending', 'descending', 'ascending',
                   'descending'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_imputer__initial_strategy': masked_array(data=['median', 'median', 'mean', 'most_frequent', 'median',
                   'median', 'most_frequent', 'constant', 'mean',
                   'median', 'constant', 'most_frequent', 'mean',
                   'constant', 'median', 'median', 'constant', 'median',
                   'median', 'median', 'most_frequent', 'constant',
                   'most_frequent', 'mean', 'constant', 'mean',
                   'most_frequent', 'constant', 'constant', 'constant',
                   'mean', 'constant', 'constant', 'median', 'mean',
                   'most_frequent', 'mean', 'most_frequent', 'constant',
                   'most_frequent', 'mean', 'most_frequent', 'constant',
                   'constant', 'constant', 'mean', 'median', 'constant',
                   'mean', 'most_frequent', 'mean', 'constant',
                   'constant', 'median', 'median', 'most_frequent',
                   'most_frequent', 'median', 'most_frequent',
                   'most_frequent', 'most_frequent', 'median',
                   'most_frequent', 'mean', 'most_frequent', 'constant',
                   'mean', 'mean', 'most_frequent', 'most_frequent',
                   'median', 'most_frequent', 'mean', 'constant', 'mean',
                   'mean', 'constant', 'median', 'median', 'mean',
                   'median', 'constant', 'mean', 'most_frequent',
                   'most_frequent', 'mean', 'mean', 'median', 'mean',
                   'constant', 'mean', 'median', 'mean', 'most_frequent',
                   'mean', 'median', 'mean', 'mean', 'median', 'mean',
                   'constant', 'median', 'most_frequent', 'most_frequent',
                   'median', 'mean', 'most_frequent', 'most_frequent',
                   'median', 'median', 'median', 'mean', 'median', 'mean',
                   'mean', 'median', 'most_frequent', 'mean', 'median',
                   'most_frequent', 'mean', 'median', 'median', 'mean',
                   'constant', 'mean', 'constant', 'constant', 'mean',
                   'mean', 'median', 'mean', 'mean', 'median',
                   'most_frequent', 'constant', 'most_frequent',
                   'constant', 'mean', 'constant', 'median', 'constant',
                   'median', 'most_frequent', 'most_frequent', 'median',
                   'mean', 'mean', 'mean', 'mean'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_imputer__keep_empty_features': masked_array(data=[True, True, True, True, False, True, True, True, True,
                   False, False, False, True, True, True, False, True,
                   True, False, False, False, False, True, True, True,
                   False, False, False, False, True, False, True, False,
                   True, True, False, False, False, False, False, True,
                   False, False, True, True, False, True, False, False,
                   True, True, False, False, False, True, True, True,
                   False, False, False, False, False, False, False, True,
                   False, True, False, False, False, True, True, True,
                   False, False, False, True, False, True, False, True,
                   False, True, True, False, False, False, False, False,
                   False, False, True, False, False, False, False, False,
                   False, False, False, True, False, True, False, False,
                   False, False, True, False, False, True, True, False,
                   False, True, True, True, False, True, True, True, True,
                   True, False, False, True, False, False, True, True,
                   False, False, True, True, True, False, False, False,
                   False, True, False, True, False, True, True, False,
                   False, True, True, True],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_imputer__kn_neighbors': masked_array(data=[96, 54, 18, 23, 66, 13, 5, 93, 5, 7, 11, 80, 22, 100,
                   44, 53, 67, 67, 2, 79, 10, 28, 6, 94, 54, 14, 33, 34,
                   66, 1, 88, 100, 100, 76, 1, 28, 100, 74, 8, 95, 63, 65,
                   97, 7, 90, 6, 80, 68, 89, 21, 53, 100, 64, 35, 50, 1,
                   100, 84, 4, 1, 51, 22, 23, 89, 78, 1, 36, 32, 24, 100,
                   10, 24, 15, 59, 67, 100, 100, 9, 31, 53, 41, 100, 92,
                   50, 82, 37, 74, 85, 19, 52, 44, 63, 27, 71, 9, 65, 15,
                   5, 53, 13, 63, 100, 60, 31, 77, 34, 71, 39, 93, 77, 7,
                   37, 74, 89, 42, 53, 1, 34, 26, 13, 21, 40, 85, 60, 8,
                   20, 68, 70, 45, 69, 80, 1, 81, 86, 35, 65, 91, 39, 16,
                   82, 68, 27, 69, 83, 60, 22, 25, 79, 69, 10],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_imputer__max_iter': masked_array(data=[77, 18, 67, 59, 80, 91, 82, 83, 66, 46, 34, 94, 24, 85,
                   67, 14, 77, 48, 1, 18, 28, 19, 96, 81, 48, 12, 83, 33,
                   41, 100, 54, 1, 1, 57, 61, 100, 1, 62, 71, 42, 55, 5,
                   22, 26, 28, 49, 100, 88, 60, 75, 94, 1, 4, 54, 94, 38,
                   100, 80, 1, 100, 83, 36, 1, 57, 100, 1, 90, 48, 23, 60,
                   56, 84, 41, 100, 24, 100, 44, 23, 43, 80, 5, 100, 100,
                   76, 100, 41, 99, 55, 63, 83, 79, 60, 14, 8, 1, 49, 37,
                   72, 51, 28, 36, 17, 37, 35, 8, 21, 66, 96, 34, 79, 1,
                   1, 100, 36, 100, 9, 1, 1, 1, 1, 87, 93, 1, 55, 38, 16,
                   94, 100, 76, 53, 100, 37, 90, 66, 28, 1, 65, 67, 91,
                   57, 64, 27, 93, 68, 90, 29, 52, 70, 71, 79],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_imputer__metric': masked_array(data=['nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean',
                   'nan_euclidean', 'nan_euclidean', 'nan_euclidean'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_imputer__n_nearest_features': masked_array(data=[14, 60, 85, 55, 82, 16, 49, 45, 15, 21, 43, 82, 55, 1,
                   37, 13, 43, 43, 92, 4, 10, 83, 9, 6, 14, 56, 1, 94, 31,
                   1, 3, 100, 9, 66, 22, 100, 100, 66, 88, 99, 58, 41, 80,
                   29, 16, 28, 29, 1, 25, 2, 7, 36, 91, 72, 54, 1, 100,
                   19, 14, 1, 36, 66, 94, 36, 96, 100, 14, 76, 14, 1, 12,
                   100, 39, 71, 81, 1, 1, 100, 26, 91, 31, 1, 100, 100,
                   87, 1, 33, 100, 14, 63, 30, 23, 57, 25, 86, 53, 50, 94,
                   18, 68, 100, 17, 78, 60, 26, 68, 23, 32, 79, 47, 61,
                   19, 24, 25, 100, 82, 10, 58, 75, 75, 70, 25, 1, 16, 10,
                   76, 67, 47, 7, 89, 87, 56, 22, 1, 37, 65, 84, 69, 21,
                   3, 18, 50, 67, 27, 49, 83, 87, 69, 66, 18],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_imputer__sample_posterior': masked_array(data=[True, True, False, False, True, True, False, True,
                   True, True, True, True, True, True, True, False, False,
                   True, False, True, True, False, True, True, True,
                   False, True, True, True, False, True, False, True,
                   True, True, False, False, False, True, True, True,
                   False, False, False, True, False, True, True, False,
                   True, False, False, True, False, True, False, True,
                   False, True, True, True, True, True, True, False,
                   False, False, False, True, False, True, True, True,
                   False, True, False, True, False, True, False, False,
                   False, True, True, False, False, True, True, False,
                   False, False, False, True, False, True, True, False,
                   True, True, False, True, True, True, True, True, True,
                   True, False, True, False, False, True, True, False,
                   True, False, False, False, True, True, False, False,
                   False, False, False, True, True, False, True, True,
                   True, False, True, True, False, True, False, False,
                   True, False, True, True, True, True, True, False, True,
                   False, True, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_imputer__skip_complete': masked_array(data=[False, True, True, True, True, True, False, True,
                   False, True, True, True, False, False, True, False,
                   True, False, True, False, False, False, True, False,
                   True, True, False, False, False, False, False, False,
                   False, False, False, False, True, False, True, True,
                   False, False, True, True, False, False, False, False,
                   False, True, True, True, True, True, False, False,
                   False, False, False, True, True, False, True, True,
                   False, False, False, False, False, True, True, True,
                   False, True, False, False, False, True, False, False,
                   True, False, False, False, True, True, True, True,
                   True, True, True, True, False, False, True, False,
                   True, True, False, True, False, False, False, False,
                   False, False, False, True, False, False, False, True,
                   False, True, False, True, False, True, False, False,
                   False, False, True, False, True, False, True, True,
                   False, True, True, False, True, True, False, True,
                   False, True, True, True, False, False, True, True,
                   True, False, True, False, False, True],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_imputer__strategy': masked_array(data=['constant', 'most_frequent', 'constant', 'mean',
                   'most_frequent', 'mean', 'median', 'most_frequent',
                   'median', 'mean', 'median', 'mean', 'median', 'mean',
                   'mean', 'most_frequent', 'median', 'median',
                   'most_frequent', 'median', 'mean', 'most_frequent',
                   'median', 'constant', 'constant', 'most_frequent',
                   'constant', 'mean', 'mean', 'most_frequent', 'median',
                   'most_frequent', 'constant', 'mean', 'most_frequent',
                   'most_frequent', 'constant', 'median', 'mean', 'mean',
                   'mean', 'most_frequent', 'most_frequent', 'constant',
                   'median', 'most_frequent', 'median', 'most_frequent',
                   'constant', 'mean', 'median', 'most_frequent', 'mean',
                   'most_frequent', 'most_frequent', 'most_frequent',
                   'constant', 'mean', 'mean', 'constant', 'mean',
                   'median', 'constant', 'constant', 'mean',
                   'most_frequent', 'most_frequent', 'most_frequent',
                   'median', 'median', 'constant', 'mean',
                   'most_frequent', 'constant', 'constant', 'constant',
                   'median', 'mean', 'mean', 'constant', 'median',
                   'constant', 'median', 'mean', 'mean', 'mean', 'mean',
                   'median', 'most_frequent', 'mean', 'median', 'mean',
                   'median', 'mean', 'median', 'mean', 'most_frequent',
                   'median', 'constant', 'median', 'mean', 'mean', 'mean',
                   'mean', 'constant', 'mean', 'mean', 'most_frequent',
                   'most_frequent', 'most_frequent', 'mean', 'mean',
                   'median', 'constant', 'most_frequent', 'median',
                   'mean', 'most_frequent', 'mean', 'mean', 'median',
                   'most_frequent', 'most_frequent', 'constant', 'median',
                   'median', 'mean', 'most_frequent', 'constant', 'mean',
                   'mean', 'most_frequent', 'most_frequent', 'mean',
                   'mean', 'mean', 'median', 'mean', 'mean', 'mean',
                   'constant', 'median', 'constant', 'constant',
                   'constant', 'median', 'most_frequent', 'mean', 'mean',
                   'median'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_imputer__tol': masked_array(data=[21.320249660943063, 55.08784119440284,
                   -42.47860782848763, -47.41442790406681,
                   -53.430008206218425, 79.2341571986749,
                   40.57487336771456, 95.86919215166822,
                   -71.52356699871238, 11.775160976854451,
                   1.2173522325780795, -42.358157534304716,
                   70.32326779076084, 26.538865212053594,
                   23.40121858424564, -58.35672836448597,
                   45.053616038803966, 22.44208512163719,
                   48.813140408168096, -83.56165761447733,
                   -24.255525419751777, 6.45344625057534,
                   -14.38167205740055, 54.336303946118676,
                   69.40792034014737, -46.81500375751407,
                   31.901081223908875, 40.268851284655284,
                   15.659941201796983, -100.0, 24.027791591169546, -100.0,
                   9.18292802735155, -85.25439075144432, -100.0,
                   -99.99971856312223, 100.0, 95.19589895372255,
                   -86.67081183926356, 51.37280825476583,
                   29.915586238751757, 22.642493058962728,
                   45.53947644622244, -68.78526621444612,
                   63.32614059045997, -0.6396024748694344,
                   -94.21945374909816, -54.193313133777494,
                   -36.82349322990907, -1.6604745790906037,
                   -46.01007817573974, 76.17762328075588,
                   -28.949328955804006, 20.763153324310508,
                   -86.49889296857367, -61.505156819669324, 100.0,
                   37.64473377162912, -47.119429731219896, -100.0,
                   -3.657039802767599, 22.379282765206128, 100.0,
                   6.813360963514569, -70.84821018087293,
                   29.39602609392216, 77.78265540979464,
                   42.90740477404583, 32.877701705331106,
                   53.95113845343687, 4.365525934532812,
                   -98.0059127804199, 81.86726064657012, -100.0,
                   37.87012108961514, 100.0, 100.0, 92.19818173094288,
                   37.75596176910534, 58.96871577918657,
                   13.14341858680423, -22.375827434718502,
                   94.7720236546858, -23.753769073309883,
                   95.82664217507568, -73.75328577265043,
                   -17.086320021880226, 26.79770828438302,
                   62.68485824432665, 61.457763958734176,
                   -7.810596387420233, 51.50650328426448,
                   47.08816776758124, 80.87011742139083,
                   -15.630479207588593, 65.16055124865557,
                   93.03756415469883, -76.52976036580124,
                   13.430426441980842, -100.0, 50.628085747775884,
                   -81.23999230070697, -78.40141581269481,
                   -72.11069499108648, -65.12062983373562,
                   -49.584065571113435, 47.32533260001472,
                   94.60611206757176, 34.5087369926799, 100.0,
                   -55.7661458188485, 39.761612799643075,
                   2.4169391833336533, -65.10929539616313,
                   -5.92414865652016, 38.86955918934484,
                   70.94191170796097, -6.545189074412548,
                   -7.81917808779275, -100.0, -32.136920011376986,
                   67.08589286688468, -83.28251436768167,
                   -59.97732232445026, -40.83374148479943,
                   23.402770761011894, -62.91801537558751,
                   30.367589798753016, -92.94537258375225,
                   5.674531449190567, -29.968409318355256,
                   -49.84476166389089, -67.51088088690105,
                   -34.295709296254046, 21.82083981021698,
                   -10.92743766868523, -26.23592382987266,
                   -68.36070373188547, -99.03420125148519,
                   90.45029761462905, -70.58435033908727,
                   85.56511453001448, 86.69191208400068,
                   85.92379586932753, -45.58694244151062,
                   -68.82473907618652, -23.27238672441696,
                   83.81720517670749, 61.039798413875076,
                   -86.81021339281168],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_imputer__weights': masked_array(data=['distance', 'uniform', 'distance', 'uniform',
                   'uniform', 'uniform', 'distance', 'uniform', 'uniform',
                   'distance', 'uniform', 'distance', 'distance',
                   'distance', 'uniform', 'uniform', 'uniform', 'uniform',
                   'distance', 'distance', 'distance', 'uniform',
                   'uniform', 'uniform', 'uniform', 'uniform', 'distance',
                   'uniform', 'uniform', 'uniform', 'distance', 'uniform',
                   'distance', 'distance', 'uniform', 'uniform',
                   'uniform', 'distance', 'uniform', 'distance',
                   'uniform', 'distance', 'uniform', 'distance',
                   'distance', 'distance', 'uniform', 'distance',
                   'distance', 'distance', 'uniform', 'uniform',
                   'distance', 'distance', 'uniform', 'uniform',
                   'uniform', 'uniform', 'distance', 'distance',
                   'distance', 'distance', 'distance', 'uniform',
                   'distance', 'uniform', 'uniform', 'uniform', 'uniform',
                   'uniform', 'distance', 'distance', 'uniform',
                   'uniform', 'distance', 'uniform', 'distance',
                   'distance', 'uniform', 'distance', 'distance',
                   'uniform', 'uniform', 'distance', 'uniform', 'uniform',
                   'distance', 'distance', 'uniform', 'uniform',
                   'uniform', 'uniform', 'uniform', 'uniform', 'uniform',
                   'uniform', 'uniform', 'distance', 'distance',
                   'uniform', 'distance', 'distance', 'uniform',
                   'uniform', 'uniform', 'uniform', 'uniform', 'distance',
                   'uniform', 'distance', 'distance', 'uniform',
                   'distance', 'distance', 'uniform', 'distance',
                   'distance', 'uniform', 'distance', 'distance',
                   'uniform', 'distance', 'distance', 'uniform',
                   'uniform', 'distance', 'uniform', 'distance',
                   'distance', 'distance', 'uniform', 'distance',
                   'distance', 'uniform', 'distance', 'uniform',
                   'distance', 'uniform', 'distance', 'distance',
                   'distance', 'uniform', 'uniform', 'distance',
                   'uniform', 'distance', 'uniform', 'uniform', 'uniform',
                   'distance'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_scale': masked_array(data=[SupressParameter(MaxAbsScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(MinMaxScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(Normalizer)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(RobustScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(StandardScaler)(),
                   SupressParameter(PowerTransformer)(),
                   SupressParameter(MaxAbsScaler)(),
                   SupressParameter(StandardScaler)()],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_scale__feature_range': masked_array(data=[0.02392532170694118, 0.9057309056567227,
                   0.8251039162577412, 0.46598325129967966,
                   0.3155605540064445, 0.877788931485361,
                   0.601716730534959, 0.44436388760654255,
                   0.4589572413909083, 0.047807883465839765,
                   0.7501693954142433, 0.25054954773190724,
                   0.08154465962910153, 0.0, 0.08256563730214207,
                   0.009956592594072446, 0.40053038526726625,
                   0.1878795761950019, 0.2668145858316426,
                   0.7943462521363731, 0.6611490224105787,
                   0.18766945286213005, 0.6026178098099726,
                   0.8831235508121847, 0.9646034350899059,
                   0.5766252139194205, 0.06976815737192646,
                   0.06896985902283226, 0.2990060945072178, 1.0,
                   0.3481784048586168, 0.3452603543377558, 1.0,
                   0.4533951021835191, 0.42319795303684515, 1.0, 0.0,
                   0.9169385921864697, 0.5424197387167501,
                   0.850594143065545, 0.8668538190744016,
                   0.35483194479039576, 0.5822017772423808,
                   0.13817303384720944, 0.5055280760398082, 0.0,
                   0.9871418520113087, 0.0, 0.248736887281221,
                   0.42749451904251856, 0.7467533919442635, 1.0,
                   0.18345036917198168, 0.7238279805166724,
                   0.029021867994102675, 0.0, 0.8873941298488166,
                   0.3043440151973457, 0.8910637979115459, 1.0,
                   0.39775465917878294, 0.8014254342192334, 0.0,
                   0.30981981274267684, 0.27502992723819236,
                   0.1604084592889325, 0.4929961295836826,
                   0.6401975652836016, 0.8555749867114244,
                   0.262528631955996, 0.5855176663013949,
                   0.540045865423442, 0.35183439792686516, 0.0, 0.0, 0.0,
                   0.21769507834251506, 0.14958687139709873,
                   0.6946551162757073, 0.12040947605375447,
                   0.19832717811631762, 0.0, 0.0, 0.8640476940179803,
                   0.48362398789226546, 0.9994708277197224,
                   0.45867325544473947, 0.7792387561588191,
                   0.23802859141676466, 0.02942463762863013,
                   0.36491888008437706, 0.04090496917955924,
                   0.1514075920931816, 0.7493717094621951,
                   0.5688594454237762, 0.42872000623070605,
                   0.5472454994095658, 0.09743900981305895,
                   0.9070087348638542, 0.8384182872005408,
                   0.6318881849268593, 0.6785678196352792,
                   0.07241628091170603, 0.022474188511930587,
                   0.6682912081638068, 0.9147105155744162,
                   0.7825334827146553, 0.8183518515184969,
                   0.6235455017140552, 0.32785358236257345,
                   0.5954861491595188, 0.39211644927949585,
                   0.36698751743925034, 0.6430126067627088, 0.0, 1.0,
                   0.010235100841385982, 0.48766468084931563,
                   0.5053826294489581, 0.8073887429630393,
                   0.2109365911034749, 0.0, 0.2892969012551769,
                   0.9829876314552294, 0.29928309958903787,
                   0.044694580879300665, 0.24497154108245797,
                   0.16239101055410632, 0.019459723723033666, 0.0,
                   0.13535710372684212, 0.0, 0.6948059391241038,
                   0.9675946849105779, 0.6317915737068707,
                   0.4478495703439843, 0.10053455934188289,
                   0.33874308573538436, 0.5503504025177987,
                   0.12099682756068468, 0.10380183620425794,
                   0.1124730155399269, 0.0987112006016925,
                   0.4089051467004351, 0.12286590519497169,
                   0.39001859915416354, 0.4080573279325843,
                   0.44205392549222516, 0.30942497056734014,
                   0.7388992293228245],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_scale__method': masked_array(data=['box-cox', 'yeo-johnson', 'yeo-johnson', 'box-cox',
                   'box-cox', 'box-cox', 'box-cox', 'yeo-johnson',
                   'yeo-johnson', 'yeo-johnson', 'yeo-johnson',
                   'yeo-johnson', 'box-cox', 'yeo-johnson', 'box-cox',
                   'box-cox', 'yeo-johnson', 'yeo-johnson', 'box-cox',
                   'box-cox', 'box-cox', 'box-cox', 'box-cox',
                   'yeo-johnson', 'yeo-johnson', 'yeo-johnson', 'box-cox',
                   'yeo-johnson', 'yeo-johnson', 'box-cox', 'box-cox',
                   'yeo-johnson', 'yeo-johnson', 'yeo-johnson',
                   'yeo-johnson', 'yeo-johnson', 'yeo-johnson', 'box-cox',
                   'yeo-johnson', 'yeo-johnson', 'yeo-johnson', 'box-cox',
                   'yeo-johnson', 'yeo-johnson', 'box-cox', 'box-cox',
                   'box-cox', 'box-cox', 'yeo-johnson', 'yeo-johnson',
                   'box-cox', 'box-cox', 'box-cox', 'box-cox',
                   'yeo-johnson', 'box-cox', 'box-cox', 'box-cox',
                   'box-cox', 'box-cox', 'yeo-johnson', 'box-cox',
                   'yeo-johnson', 'yeo-johnson', 'yeo-johnson', 'box-cox',
                   'box-cox', 'box-cox', 'yeo-johnson', 'yeo-johnson',
                   'box-cox', 'box-cox', 'yeo-johnson', 'yeo-johnson',
                   'yeo-johnson', 'box-cox', 'yeo-johnson', 'box-cox',
                   'box-cox', 'box-cox', 'box-cox', 'box-cox', 'box-cox',
                   'box-cox', 'box-cox', 'yeo-johnson', 'box-cox',
                   'yeo-johnson', 'yeo-johnson', 'box-cox', 'box-cox',
                   'box-cox', 'box-cox', 'yeo-johnson', 'box-cox',
                   'yeo-johnson', 'box-cox', 'yeo-johnson', 'yeo-johnson',
                   'yeo-johnson', 'yeo-johnson', 'yeo-johnson', 'box-cox',
                   'yeo-johnson', 'box-cox', 'yeo-johnson', 'yeo-johnson',
                   'box-cox', 'yeo-johnson', 'yeo-johnson', 'yeo-johnson',
                   'box-cox', 'box-cox', 'box-cox', 'box-cox',
                   'yeo-johnson', 'box-cox', 'yeo-johnson', 'box-cox',
                   'box-cox', 'yeo-johnson', 'box-cox', 'box-cox',
                   'yeo-johnson', 'yeo-johnson', 'yeo-johnson',
                   'yeo-johnson', 'yeo-johnson', 'box-cox', 'box-cox',
                   'yeo-johnson', 'box-cox', 'yeo-johnson', 'box-cox',
                   'box-cox', 'yeo-johnson', 'yeo-johnson', 'yeo-johnson',
                   'yeo-johnson', 'box-cox', 'box-cox', 'yeo-johnson',
                   'yeo-johnson', 'box-cox', 'box-cox', 'box-cox',
                   'yeo-johnson', 'box-cox', 'yeo-johnson', 'box-cox'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_scale__norm': masked_array(data=['l2', 'l2', 'l1', 'max', 'l2', 'max', 'l2', 'l2', 'l2',
                   'l1', 'l2', 'l2', 'max', 'max', 'l1', 'max', 'l2',
                   'l2', 'l2', 'l2', 'l1', 'max', 'l2', 'l2', 'l2', 'max',
                   'l1', 'l2', 'l2', 'l1', 'max', 'l1', 'l2', 'max',
                   'max', 'max', 'max', 'l2', 'l2', 'l2', 'l1', 'max',
                   'l2', 'l1', 'max', 'max', 'max', 'max', 'l2', 'max',
                   'max', 'l1', 'max', 'max', 'l2', 'max', 'max', 'l2',
                   'l1', 'l2', 'l2', 'l2', 'max', 'l1', 'l2', 'max', 'l2',
                   'l2', 'l2', 'l2', 'max', 'max', 'l1', 'l2', 'l2', 'l2',
                   'max', 'l1', 'max', 'l2', 'l1', 'l2', 'l1', 'max',
                   'l2', 'l1', 'max', 'max', 'max', 'max', 'max', 'l2',
                   'max', 'max', 'max', 'l2', 'l1', 'max', 'max', 'max',
                   'max', 'l1', 'l2', 'l2', 'max', 'l1', 'l2', 'l1', 'l2',
                   'max', 'max', 'max', 'l2', 'max', 'l1', 'l2', 'l2',
                   'l2', 'l2', 'max', 'l1', 'max', 'max', 'max', 'max',
                   'max', 'max', 'max', 'l2', 'l1', 'l2', 'max', 'l2',
                   'max', 'max', 'max', 'max', 'l1', 'l1', 'max', 'max',
                   'max', 'max', 'l2', 'l2', 'l1', 'max', 'max', 'max',
                   'l1'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_scale__standardize': masked_array(data=[True, False, True, False, False, True, True, True,
                   False, False, False, True, True, True, False, False,
                   False, True, True, True, False, True, False, False,
                   True, False, True, False, False, True, True, True,
                   True, False, False, True, False, True, False, False,
                   True, False, True, True, False, False, True, True,
                   True, True, False, False, False, False, True, False,
                   False, False, False, False, True, False, False, True,
                   False, True, True, False, False, False, True, True,
                   True, False, True, True, True, False, True, False,
                   False, True, True, True, False, False, False, False,
                   True, False, False, False, True, True, True, True,
                   False, False, True, False, False, False, True, False,
                   False, False, False, False, False, True, True, False,
                   False, False, False, False, False, True, True, True,
                   True, True, True, True, True, False, True, True, True,
                   False, False, False, True, True, False, True, True,
                   False, False, False, False, True, False, False, True,
                   True, True, False, True, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_scale__unit_variance': masked_array(data=[True, True, True, True, True, False, False, False,
                   False, True, True, True, True, False, True, False,
                   False, False, False, True, True, False, False, True,
                   False, False, True, False, False, False, True, False,
                   True, False, False, False, False, False, False, False,
                   True, False, True, True, True, False, True, True,
                   False, True, False, False, True, False, False, False,
                   False, False, True, True, True, False, False, False,
                   False, False, False, True, True, False, True, False,
                   False, False, False, False, True, True, False, True,
                   False, True, False, True, True, False, False, False,
                   False, False, True, False, False, False, False, False,
                   True, False, True, False, True, False, True, False,
                   True, False, True, False, False, False, True, True,
                   False, True, False, False, True, False, True, True,
                   False, False, True, False, False, True, False, False,
                   True, True, False, False, False, False, False, True,
                   False, False, False, True, True, True, True, True,
                   True, False, False, True, False, True],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_scale__with_centering': masked_array(data=[False, True, True, True, False, False, True, False,
                   False, True, False, False, True, True, False, False,
                   True, False, False, False, True, False, True, True,
                   True, False, True, False, True, True, True, False,
                   False, False, False, True, False, False, False, True,
                   True, False, False, False, True, False, True, True,
                   True, False, False, False, True, True, False, True,
                   True, True, True, False, False, True, False, False,
                   True, False, False, True, True, True, False, False,
                   True, False, False, True, False, True, False, True,
                   True, False, True, True, True, True, True, False,
                   False, True, False, False, True, False, True, True,
                   True, False, True, False, True, True, False, True,
                   True, False, True, True, True, False, True, True, True,
                   True, True, False, True, False, False, True, True,
                   True, False, False, False, False, True, False, True,
                   True, True, False, True, True, True, False, False,
                   False, False, False, False, True, False, False, False,
                   True, False, False, False, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_scale__with_mean': masked_array(data=[False, True, False, False, False, False, False, False,
                   False, False, True, False, False, False, False, False,
                   True, False, True, True, True, True, True, True, True,
                   True, True, False, True, True, True, True, True, False,
                   False, False, True, False, False, True, False, True,
                   False, False, False, False, True, True, True, False,
                   True, False, False, False, False, False, True, False,
                   True, True, False, False, True, False, True, True,
                   True, False, True, False, False, False, True, False,
                   False, False, False, False, False, False, True, False,
                   True, True, False, False, True, True, False, False,
                   False, False, True, False, True, False, False, False,
                   False, True, False, True, False, False, False, True,
                   False, True, False, True, False, False, False, False,
                   True, False, False, True, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   True, False, False, False, True, False, False, False,
                   False, False, True, False, True, False, True, False,
                   False, True, False, True],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_scale__with_scaling': masked_array(data=[False, False, False, False, True, False, True, False,
                   True, False, True, True, False, False, True, True,
                   True, False, False, True, False, False, True, False,
                   False, True, False, True, True, False, False, True,
                   False, False, True, True, True, True, False, False,
                   True, True, False, True, True, False, True, False,
                   True, False, False, False, True, True, False, True,
                   True, False, False, True, False, True, True, False,
                   True, False, False, True, True, False, True, True,
                   True, False, False, False, True, False, True, True,
                   False, False, False, True, True, True, True, False,
                   False, True, False, False, False, False, True, False,
                   False, False, False, True, True, False, True, False,
                   False, False, False, True, False, True, False, False,
                   False, True, False, True, True, False, True, False,
                   True, False, False, False, True, False, True, True,
                   False, False, False, True, False, False, True, True,
                   True, False, False, False, False, False, False, False,
                   True, False, False, False, False, True],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03638628715886626), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 1024), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 64), ('classifier__base_estimator__max_samples', 0.7525290224808996), ('classifier__base_estimator__min_impurity_decrease', 0.030446331103650623), ('classifier__base_estimator__min_samples_leaf', 11), ('classifier__base_estimator__min_samples_split', 10), ('classifier__base_estimator__min_weight_fraction_leaf', 0.06341690919792532), ('classifier__base_estimator__n_estimators', 1863), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 13), ('classifier__max_iter', 1), ('classifier__threshold', 0.7461931799185204), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 3), ('dimension_reduction__n_components', 127), ('dimension_reduction__n_oversamples', 71), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 14.505822191633484), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -65.38656121406297), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 96), ('imputer__max_iter', 77), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 14), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'constant'), ('imputer__tol', 21.320249660943063), ('imputer__weights', 'distance'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.02392532170694118), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04416576386904311), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 8192), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 8), ('classifier__base_estimator__max_samples', 0.3859080277469972), ('classifier__base_estimator__min_impurity_decrease', 0.06357291018791704), ('classifier__base_estimator__min_samples_leaf', 15), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4961469999311684), ('classifier__base_estimator__n_estimators', 7691), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 11), ('classifier__max_iter', 13), ('classifier__threshold', 0.576984385671897), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 91), ('dimension_reduction__n_components', 38), ('dimension_reduction__n_oversamples', 48), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -66.1446800889253), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -84.6324083461307), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 54), ('imputer__max_iter', 18), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 60), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 55.08784119440284), ('imputer__weights', 'uniform'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.9057309056567227), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04593612608346886), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 8), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 8), ('classifier__base_estimator__max_samples', 0.7639749047734716), ('classifier__base_estimator__min_impurity_decrease', 0.05573404230338014), ('classifier__base_estimator__min_samples_leaf', 16), ('classifier__base_estimator__min_samples_split', 12), ('classifier__base_estimator__min_weight_fraction_leaf', 0.1907366164457207), ('classifier__base_estimator__n_estimators', 2059), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 4), ('classifier__max_iter', 13), ('classifier__threshold', 0.7176849201271599), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 54), ('dimension_reduction__n_components', 129), ('dimension_reduction__n_oversamples', 66), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 39.48084247414212), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -24.939879942221395), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 18), ('imputer__max_iter', 67), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 85), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'constant'), ('imputer__tol', -42.47860782848763), ('imputer__weights', 'distance'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.8251039162577412), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l1'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.008593578069828035), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 256), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 4096), ('classifier__base_estimator__max_samples', 0.878998835644445), ('classifier__base_estimator__min_impurity_decrease', 0.09119288615068838), ('classifier__base_estimator__min_samples_leaf', 7), ('classifier__base_estimator__min_samples_split', 7), ('classifier__base_estimator__min_weight_fraction_leaf', 0.41876509255066696), ('classifier__base_estimator__n_estimators', 6143), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 2), ('classifier__max_iter', 12), ('classifier__threshold', 0.5820526954409315), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 127), ('dimension_reduction__n_components', 55), ('dimension_reduction__n_oversamples', 22), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 17.36023874330428), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 21.461708627559346), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 23), ('imputer__max_iter', 59), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 55), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', -47.41442790406681), ('imputer__weights', 'uniform'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.46598325129967966), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.02190145932204617), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 16384), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 128), ('classifier__base_estimator__max_samples', 0.6677698966603746), ('classifier__base_estimator__min_impurity_decrease', 0.03530838455279714), ('classifier__base_estimator__min_samples_leaf', 11), ('classifier__base_estimator__min_samples_split', 9), ('classifier__base_estimator__min_weight_fraction_leaf', 0.44119524363127155), ('classifier__base_estimator__n_estimators', 2630), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 8), ('classifier__max_iter', 14), ('classifier__threshold', 0.6980660619814627), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 9), ('dimension_reduction__n_components', 143), ('dimension_reduction__n_oversamples', 65), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 89.10751651548225), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 44.23723927030579), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 66), ('imputer__max_iter', 80), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 82), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -53.430008206218425), ('imputer__weights', 'uniform'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.3155605540064445), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04696848688013859), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 4096), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 128), ('classifier__base_estimator__max_samples', 0.5580269021150789), ('classifier__base_estimator__min_impurity_decrease', 0.07852839371424958), ('classifier__base_estimator__min_samples_leaf', 9), ('classifier__base_estimator__min_samples_split', 10), ('classifier__base_estimator__min_weight_fraction_leaf', 0.28230018657058265), ('classifier__base_estimator__n_estimators', 321), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 15), ('classifier__max_iter', 10), ('classifier__threshold', 0.6192048662261642), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 138), ('dimension_reduction__n_components', 92), ('dimension_reduction__n_oversamples', 85), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -30.13527938354551), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -52.03892714828605), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 13), ('imputer__max_iter', 91), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 16), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', 79.2341571986749), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.877788931485361), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03876821894139413), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 512), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 1024), ('classifier__base_estimator__max_samples', 0.45097845665316244), ('classifier__base_estimator__min_impurity_decrease', 0.07338824852688058), ('classifier__base_estimator__min_samples_leaf', 11), ('classifier__base_estimator__min_samples_split', 15), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3289263786485137), ('classifier__base_estimator__n_estimators', 6156), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 7), ('classifier__max_iter', 8), ('classifier__threshold', 0.7196389271131204), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 4), ('dimension_reduction__n_components', 19), ('dimension_reduction__n_oversamples', 83), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -34.212208148775005), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -2.758839732480766), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 5), ('imputer__max_iter', 82), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 49), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', 40.57487336771456), ('imputer__weights', 'distance'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.601716730534959), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.046000461321865825), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 32), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 512), ('classifier__base_estimator__max_samples', 0.07451103080084504), ('classifier__base_estimator__min_impurity_decrease', 0.038572959098466475), ('classifier__base_estimator__min_samples_leaf', 13), ('classifier__base_estimator__min_samples_split', 7), ('classifier__base_estimator__min_weight_fraction_leaf', 0.2863782125617293), ('classifier__base_estimator__n_estimators', 6934), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 2), ('classifier__max_iter', 8), ('classifier__threshold', 0.6747797868496723), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 60), ('dimension_reduction__n_components', 71), ('dimension_reduction__n_oversamples', 26), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', -27.769332523606565), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -72.03413151791047), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 93), ('imputer__max_iter', 83), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 45), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 95.86919215166822), ('imputer__weights', 'uniform'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.44436388760654255), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0350310722310683), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 64), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 0.40215121327956915), ('classifier__base_estimator__min_impurity_decrease', 0.059437891359138566), ('classifier__base_estimator__min_samples_leaf', 4), ('classifier__base_estimator__min_samples_split', 13), ('classifier__base_estimator__min_weight_fraction_leaf', 0.22220090987420965), ('classifier__base_estimator__n_estimators', 1334), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 15), ('classifier__max_iter', 2), ('classifier__threshold', 0.7321500061012368), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 51), ('dimension_reduction__n_components', 57), ('dimension_reduction__n_oversamples', 50), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', -43.11696946241853), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 83.33728468472196), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 5), ('imputer__max_iter', 66), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 15), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', -71.52356699871238), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.4589572413909083), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.040891500983187584), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 512), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 32), ('classifier__base_estimator__max_samples', 0.1949648574965221), ('classifier__base_estimator__min_impurity_decrease', 0.08938380610525196), ('classifier__base_estimator__min_samples_leaf', 13), ('classifier__base_estimator__min_samples_split', 13), ('classifier__base_estimator__min_weight_fraction_leaf', 0.00992377724082605), ('classifier__base_estimator__n_estimators', 2441), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 10), ('classifier__max_iter', 1), ('classifier__threshold', 0.5071560822833452), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 68), ('dimension_reduction__n_components', 138), ('dimension_reduction__n_oversamples', 54), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -15.281716053696698), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 76.65534972258382), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 7), ('imputer__max_iter', 46), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 21), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', 11.775160976854451), ('imputer__weights', 'distance'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 0.047807883465839765), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 4.431344851218989e-06), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 2), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 256), ('classifier__base_estimator__max_samples', 0.7390607245491705), ('classifier__base_estimator__min_impurity_decrease', 0.007034998347847101), ('classifier__base_estimator__min_samples_leaf', 14), ('classifier__base_estimator__min_samples_split', 6), ('classifier__base_estimator__min_weight_fraction_leaf', 0.07398502005060166), ('classifier__base_estimator__n_estimators', 3155), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 14), ('classifier__max_iter', 1), ('classifier__threshold', 0.5276351568122943), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 145), ('dimension_reduction__n_components', 94), ('dimension_reduction__n_oversamples', 31), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 84.55598677022778), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -21.337687372972965), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 11), ('imputer__max_iter', 34), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 43), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'median'), ('imputer__tol', 1.2173522325780795), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.7501693954142433), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.018523163302893508), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 1024), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 8192), ('classifier__base_estimator__max_samples', 0.5594920959917679), ('classifier__base_estimator__min_impurity_decrease', 0.000293863419489458), ('classifier__base_estimator__min_samples_leaf', 7), ('classifier__base_estimator__min_samples_split', 5), ('classifier__base_estimator__min_weight_fraction_leaf', 0.04787343986216327), ('classifier__base_estimator__n_estimators', 2048), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 16), ('classifier__max_iter', 3), ('classifier__threshold', 0.6582521482472684), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 8), ('dimension_reduction__n_components', 39), ('dimension_reduction__n_oversamples', 0), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 22.806552944470553), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 92.00442273840912), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 80), ('imputer__max_iter', 94), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 82), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', -42.358157534304716), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.25054954773190724), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.030764726731833992), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 8192), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 2048), ('classifier__base_estimator__max_samples', 0.761074598198586), ('classifier__base_estimator__min_impurity_decrease', 0.06655843323853154), ('classifier__base_estimator__min_samples_leaf', 4), ('classifier__base_estimator__min_samples_split', 3), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4885678022943914), ('classifier__base_estimator__n_estimators', 4282), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 6), ('classifier__max_iter', 5), ('classifier__threshold', 0.5772838097262213), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 63), ('dimension_reduction__n_components', 48), ('dimension_reduction__n_oversamples', 83), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -10.390464119269623), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -27.880001567224866), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 22), ('imputer__max_iter', 24), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 55), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', 70.32326779076084), ('imputer__weights', 'distance'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.08154465962910153), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.008268263720592858), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 1), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 0.34838834441177613), ('classifier__base_estimator__min_impurity_decrease', 0.1), ('classifier__base_estimator__min_samples_leaf', 10), ('classifier__base_estimator__min_samples_split', 4), ('classifier__base_estimator__min_weight_fraction_leaf', 0.5), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 13), ('classifier__max_iter', None), ('classifier__threshold', 0.6447284251243098), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 73), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 100), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 100.0), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -100.0), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 100), ('imputer__max_iter', 85), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 1), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', 26.538865212053594), ('imputer__weights', 'distance'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.0), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.02300916233323594), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 512), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 512), ('classifier__base_estimator__max_samples', 0.15169120297752592), ('classifier__base_estimator__min_impurity_decrease', 0.020109374188879477), ('classifier__base_estimator__min_samples_leaf', 5), ('classifier__base_estimator__min_samples_split', 15), ('classifier__base_estimator__min_weight_fraction_leaf', 0.45287619563992354), ('classifier__base_estimator__n_estimators', 4356), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 10), ('classifier__max_iter', 10), ('classifier__threshold', 0.7263678306315418), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 113), ('dimension_reduction__n_components', 103), ('dimension_reduction__n_oversamples', 97), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -17.46738641814352), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -14.951975164189776), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 44), ('imputer__max_iter', 67), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 37), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', 23.40121858424564), ('imputer__weights', 'uniform'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.08256563730214207), ('scale__method', 'box-cox'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.02252026860772129), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 8192), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 4), ('classifier__base_estimator__max_samples', 0.8819630962093924), ('classifier__base_estimator__min_impurity_decrease', 0.09767758291277233), ('classifier__base_estimator__min_samples_leaf', 1), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.19783076009792872), ('classifier__base_estimator__n_estimators', 7809), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 3), ('classifier__max_iter', 4), ('classifier__threshold', 0.5067355135699181), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 11), ('dimension_reduction__n_components', 34), ('dimension_reduction__n_oversamples', 20), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -54.706265888200036), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 77.20200742510349), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 53), ('imputer__max_iter', 14), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 13), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -58.35672836448597), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 0.009956592594072446), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.009167890660329388), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 8192), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 1024), ('classifier__base_estimator__max_samples', 0.45792081952363733), ('classifier__base_estimator__min_impurity_decrease', 0.00386750164849904), ('classifier__base_estimator__min_samples_leaf', 1), ('classifier__base_estimator__min_samples_split', 9), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4773495562957836), ('classifier__base_estimator__n_estimators', 8854), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 3), ('classifier__max_iter', 12), ('classifier__threshold', 0.5196045015965995), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 33), ('dimension_reduction__n_components', 115), ('dimension_reduction__n_oversamples', 74), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 15.094327458575904), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 71.18384759432789), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 67), ('imputer__max_iter', 77), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 43), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'median'), ('imputer__tol', 45.053616038803966), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.40053038526726625), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.035634030909898355), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 256), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 64), ('classifier__base_estimator__max_samples', 0.6495392023577913), ('classifier__base_estimator__min_impurity_decrease', 0.00627885202806663), ('classifier__base_estimator__min_samples_leaf', 5), ('classifier__base_estimator__min_samples_split', 15), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3059682330495639), ('classifier__base_estimator__n_estimators', 3618), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 11), ('classifier__max_iter', 3), ('classifier__threshold', 0.5482600829069815), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 85), ('dimension_reduction__n_components', 103), ('dimension_reduction__n_oversamples', 56), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -56.2666540257133), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -58.42554307940181), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 67), ('imputer__max_iter', 48), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 43), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', 22.44208512163719), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.1878795761950019), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.041942269049468406), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 2), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 8192), ('classifier__base_estimator__max_samples', 0.15867467473151764), ('classifier__base_estimator__min_impurity_decrease', 0.01853939001906833), ('classifier__base_estimator__min_samples_leaf', 8), ('classifier__base_estimator__min_samples_split', 12), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3663565997652187), ('classifier__base_estimator__n_estimators', 6378), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 4), ('classifier__max_iter', 15), ('classifier__threshold', 0.5818422782591451), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 16), ('dimension_reduction__n_components', 120), ('dimension_reduction__n_oversamples', 22), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -15.477597655044335), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 25.45711985214365), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 2), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 92), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 48.813140408168096), ('imputer__weights', 'distance'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.2668145858316426), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.049955088459584795), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 8), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 2048), ('classifier__base_estimator__max_samples', 0.9263792319555748), ('classifier__base_estimator__min_impurity_decrease', 0.012261006423007119), ('classifier__base_estimator__min_samples_leaf', 6), ('classifier__base_estimator__min_samples_split', 5), ('classifier__base_estimator__min_weight_fraction_leaf', 0.319030439248628), ('classifier__base_estimator__n_estimators', 9479), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 5), ('classifier__max_iter', 15), ('classifier__threshold', 0.6040685121315511), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 47), ('dimension_reduction__n_components', 118), ('dimension_reduction__n_oversamples', 95), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', 80.89764710513782), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -61.4028915900697), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 79), ('imputer__max_iter', 18), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 4), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', -83.56165761447733), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.7943462521363731), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.010485944715268633), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 4), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 8192), ('classifier__base_estimator__max_samples', 0.29458009760913967), ('classifier__base_estimator__min_impurity_decrease', 0.00490550045829319), ('classifier__base_estimator__min_samples_leaf', 14), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3311493404916903), ('classifier__base_estimator__n_estimators', 508), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 3), ('classifier__max_iter', 14), ('classifier__threshold', 0.5943256053942098), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 131), ('dimension_reduction__n_components', 111), ('dimension_reduction__n_oversamples', 88), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 6.562740662150119), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 13.089493754796266), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 10), ('imputer__max_iter', 28), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 10), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', -24.255525419751777), ('imputer__weights', 'distance'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.6611490224105787), ('scale__method', 'box-cox'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.00038454418479051965), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 16), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 128), ('classifier__base_estimator__max_samples', 0.4207839948831282), ('classifier__base_estimator__min_impurity_decrease', 0.09686927528441919), ('classifier__base_estimator__min_samples_leaf', 14), ('classifier__base_estimator__min_samples_split', 7), ('classifier__base_estimator__min_weight_fraction_leaf', 0.27835486753996047), ('classifier__base_estimator__n_estimators', 2311), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 10), ('classifier__max_iter', 7), ('classifier__threshold', 0.696985575443016), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 82), ('dimension_reduction__n_components', 6), ('dimension_reduction__n_oversamples', 99), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -25.610612063839127), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 86.9474318289119), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 28), ('imputer__max_iter', 19), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 83), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 6.45344625057534), ('imputer__weights', 'uniform'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.18766945286213005), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.010098287067188186), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 8), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 16), ('classifier__base_estimator__max_samples', 0.3679867883264559), ('classifier__base_estimator__min_impurity_decrease', 0.01374743702306789), ('classifier__base_estimator__min_samples_leaf', 7), ('classifier__base_estimator__min_samples_split', 16), ('classifier__base_estimator__min_weight_fraction_leaf', 0.27351688142150576), ('classifier__base_estimator__n_estimators', 2540), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 11), ('classifier__max_iter', 4), ('classifier__threshold', 0.6301253200137882), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 84), ('dimension_reduction__n_components', 27), ('dimension_reduction__n_oversamples', 72), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 94.37615522226429), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -10.890462005547505), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 6), ('imputer__max_iter', 96), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 9), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'median'), ('imputer__tol', -14.38167205740055), ('imputer__weights', 'uniform'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.6026178098099726), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04372949660535073), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', None), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 64), ('classifier__base_estimator__max_samples', 0.5016388712184234), ('classifier__base_estimator__min_impurity_decrease', 0.01478272798105507), ('classifier__base_estimator__min_samples_leaf', 9), ('classifier__base_estimator__min_samples_split', 2), ('classifier__base_estimator__min_weight_fraction_leaf', 0.09398615352925545), ('classifier__base_estimator__n_estimators', 4546), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 2), ('classifier__max_iter', 11), ('classifier__threshold', 0.716776835633602), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 35), ('dimension_reduction__n_components', 57), ('dimension_reduction__n_oversamples', 98), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -90.5356233173597), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -9.095665335808533), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 94), ('imputer__max_iter', 81), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 6), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'constant'), ('imputer__tol', 54.336303946118676), ('imputer__weights', 'uniform'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.8831235508121847), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.005909098018287665), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', None), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 1.0), ('classifier__base_estimator__min_impurity_decrease', 0.05814441060781114), ('classifier__base_estimator__min_samples_leaf', 8), ('classifier__base_estimator__min_samples_split', 9), ('classifier__base_estimator__min_weight_fraction_leaf', 0.2037090655936749), ('classifier__base_estimator__n_estimators', 8793), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 5), ('classifier__max_iter', 3), ('classifier__threshold', 0.6802684797093344), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 82), ('dimension_reduction__n_components', 63), ('dimension_reduction__n_oversamples', 3), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 72.80682283400517), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 24.745078667097587), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 54), ('imputer__max_iter', 48), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 14), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'constant'), ('imputer__tol', 69.40792034014737), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 0.9646034350899059), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.020802023170178374), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 4), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 0.3621415994552169), ('classifier__base_estimator__min_impurity_decrease', 0.09804264956838274), ('classifier__base_estimator__min_samples_leaf', 13), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.12096565897171462), ('classifier__base_estimator__n_estimators', 10000), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 14), ('classifier__max_iter', 9), ('classifier__threshold', 0.6435367222931767), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 86), ('dimension_reduction__n_components', 4), ('dimension_reduction__n_oversamples', 71), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 76.98193342032039), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -9.641031453810854), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 14), ('imputer__max_iter', 12), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 56), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -46.81500375751407), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.5766252139194205), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', None), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 1.0), ('classifier__base_estimator__min_impurity_decrease', 0.0), ('classifier__base_estimator__min_samples_leaf', 14), ('classifier__base_estimator__min_samples_split', 6), ('classifier__base_estimator__min_weight_fraction_leaf', 0.5), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 1), ('classifier__max_iter', None), ('classifier__threshold', 0.5), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 111), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 83), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', -100.0), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -77.95010736305854), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 33), ('imputer__max_iter', 83), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 1), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'constant'), ('imputer__tol', 31.901081223908875), ('imputer__weights', 'distance'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 0.06976815737192646), ('scale__method', 'box-cox'), ('scale__norm', 'l1'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.028735624607826773), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 1024), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 64), ('classifier__base_estimator__max_samples', 1.0), ('classifier__base_estimator__min_impurity_decrease', 0.0002877266888722154), ('classifier__base_estimator__min_samples_leaf', 9), ('classifier__base_estimator__min_samples_split', 3), ('classifier__base_estimator__min_weight_fraction_leaf', 0.2782531234587482), ('classifier__base_estimator__n_estimators', 8894), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 8), ('classifier__max_iter', 7), ('classifier__threshold', 0.648980435877566), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 147), ('dimension_reduction__n_components', 117), ('dimension_reduction__n_oversamples', 83), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', -4.583870547804423), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 86.60643951111473), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 34), ('imputer__max_iter', 33), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 94), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', 40.268851284655284), ('imputer__weights', 'uniform'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.06896985902283226), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.013170932151111087), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 256), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 8), ('classifier__base_estimator__max_samples', 0.8872488593231572), ('classifier__base_estimator__min_impurity_decrease', 0.00918343679842196), ('classifier__base_estimator__min_samples_leaf', 1), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.15976678757389523), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 13), ('classifier__max_iter', 7), ('classifier__threshold', 0.6878598988059015), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 145), ('dimension_reduction__n_components', 28), ('dimension_reduction__n_oversamples', 32), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 44.410487561317325), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -3.3381827375441873), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 66), ('imputer__max_iter', 41), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 31), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', 15.659941201796983), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.2990060945072178), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 1), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 64), ('classifier__base_estimator__max_samples', 1.0), ('classifier__base_estimator__min_impurity_decrease', 0.005091244704044151), ('classifier__base_estimator__min_samples_leaf', 16), ('classifier__base_estimator__min_samples_split', 2), ('classifier__base_estimator__min_weight_fraction_leaf', 6.549049926463594e-06), ('classifier__base_estimator__n_estimators', 10000), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 16), ('classifier__max_iter', 0), ('classifier__threshold', 0.5), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 150), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 0), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', 100.0), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -100.0), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 1), ('imputer__max_iter', 100), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 1), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -100.0), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 1.0), ('scale__method', 'box-cox'), ('scale__norm', 'l1'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04351746531566193), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 16), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 2048), ('classifier__base_estimator__max_samples', 0.22963304144099922), ('classifier__base_estimator__min_impurity_decrease', 0.007207948852344749), ('classifier__base_estimator__min_samples_leaf', 10), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.21105023855712451), ('classifier__base_estimator__n_estimators', 2812), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 4), ('classifier__max_iter', 7), ('classifier__threshold', 0.5507299505259631), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 83), ('dimension_reduction__n_components', 149), ('dimension_reduction__n_oversamples', 67), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -23.831718999623902), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 88.8686539228016), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 88), ('imputer__max_iter', 54), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 3), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', 24.027791591169546), ('imputer__weights', 'distance'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.3481784048586168), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.05), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 1), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 0.06045481119532443), ('classifier__base_estimator__min_impurity_decrease', 0.0047471996960205395), ('classifier__base_estimator__min_samples_leaf', 2), ('classifier__base_estimator__min_samples_split', 16), ('classifier__base_estimator__min_weight_fraction_leaf', 0.0), ('classifier__base_estimator__n_estimators', 10000), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 16), ('classifier__max_iter', 0), ('classifier__threshold', 0.6567136266111155), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 150), ('dimension_reduction__n_components', 2), ('dimension_reduction__n_oversamples', 2), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 31.745742191700458), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 100.0), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 100), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 100), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -100.0), ('imputer__weights', 'uniform'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.3452603543377558), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l1'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.05), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', None), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 1.0), ('classifier__base_estimator__min_impurity_decrease', 0.06920040534982763), ('classifier__base_estimator__min_samples_leaf', 7), ('classifier__base_estimator__min_samples_split', 2), ('classifier__base_estimator__min_weight_fraction_leaf', 0.2390387873626898), ('classifier__base_estimator__n_estimators', 10000), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 1), ('classifier__max_iter', None), ('classifier__threshold', 0.662945542635232), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 36), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 11), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', 50.05791644807235), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -26.60276568139473), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 100), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 9), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'constant'), ('imputer__tol', 9.18292802735155), ('imputer__weights', 'distance'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 1.0), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03825737327716991), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 4096), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 512), ('classifier__base_estimator__max_samples', 0.3907980419520002), ('classifier__base_estimator__min_impurity_decrease', 0.0008038852355364622), ('classifier__base_estimator__min_samples_leaf', 13), ('classifier__base_estimator__min_samples_split', 13), ('classifier__base_estimator__min_weight_fraction_leaf', 0.0833908003627724), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 3), ('classifier__max_iter', 11), ('classifier__threshold', 0.556255058289241), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 68), ('dimension_reduction__n_components', 103), ('dimension_reduction__n_oversamples', 12), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -27.072152571022073), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 92.74653983123002), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 76), ('imputer__max_iter', 57), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 66), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', -85.25439075144432), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.4533951021835191), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0371661345949661), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 2048), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 256), ('classifier__base_estimator__max_samples', 0.4168547704821927), ('classifier__base_estimator__min_impurity_decrease', 0.07379056855702108), ('classifier__base_estimator__min_samples_leaf', 1), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.5), ('classifier__base_estimator__n_estimators', 2747), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 10), ('classifier__max_iter', 5), ('classifier__threshold', 0.5), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 143), ('dimension_reduction__n_components', 72), ('dimension_reduction__n_oversamples', 38), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', -16.60893333021167), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 93.62992605234118), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 1), ('imputer__max_iter', 61), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 22), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -100.0), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.42319795303684515), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.004683200194329985), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 4096), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 2048), ('classifier__base_estimator__max_samples', 0.3433029303776533), ('classifier__base_estimator__min_impurity_decrease', 0.09999985179590758), ('classifier__base_estimator__min_samples_leaf', 5), ('classifier__base_estimator__min_samples_split', 8), ('classifier__base_estimator__min_weight_fraction_leaf', 0.2974551328830462), ('classifier__base_estimator__n_estimators', 3583), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 7), ('classifier__max_iter', 5), ('classifier__threshold', 0.5009831834633237), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 2), ('dimension_reduction__n_components', 2), ('dimension_reduction__n_oversamples', 16), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -100.0), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 99.99981441908861), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 28), ('imputer__max_iter', 100), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 100), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -99.99971856312223), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 1.0), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', None), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.1), ('classifier__base_estimator__min_samples_leaf', 1), ('classifier__base_estimator__min_samples_split', 16), ('classifier__base_estimator__min_weight_fraction_leaf', 0.5), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 1), ('classifier__max_iter', None), ('classifier__threshold', 0.75), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 2), ('dimension_reduction__n_components', 2), ('dimension_reduction__n_oversamples', 100), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -100.0), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 100.0), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 100), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 100), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'constant'), ('imputer__tol', 100.0), ('imputer__weights', 'uniform'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.0), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04107963553548775), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 16384), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 128), ('classifier__base_estimator__max_samples', 0.11726464473370443), ('classifier__base_estimator__min_impurity_decrease', 0.03717606472157949), ('classifier__base_estimator__min_samples_leaf', 7), ('classifier__base_estimator__min_samples_split', 6), ('classifier__base_estimator__min_weight_fraction_leaf', 0.36998720731865015), ('classifier__base_estimator__n_estimators', 4974), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 9), ('classifier__max_iter', 5), ('classifier__threshold', 0.738025383752136), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 3), ('dimension_reduction__n_components', 76), ('dimension_reduction__n_oversamples', 84), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 94.67619991600696), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 87.10610964508533), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 74), ('imputer__max_iter', 62), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 66), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', 95.19589895372255), ('imputer__weights', 'distance'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.9169385921864697), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.012947455315137713), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 4), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.4513455748496398), ('classifier__base_estimator__min_impurity_decrease', 0.040523492528939366), ('classifier__base_estimator__min_samples_leaf', 6), ('classifier__base_estimator__min_samples_split', 12), ('classifier__base_estimator__min_weight_fraction_leaf', 0.06015499653905454), ('classifier__base_estimator__n_estimators', 6523), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 2), ('classifier__max_iter', 15), ('classifier__threshold', 0.5229139154283674), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 41), ('dimension_reduction__n_components', 83), ('dimension_reduction__n_oversamples', 65), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -100.0), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -24.036145720971746), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 8), ('imputer__max_iter', 71), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 88), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', -86.67081183926356), ('imputer__weights', 'uniform'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.5424197387167501), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.01466140922609626), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 64), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 512), ('classifier__base_estimator__max_samples', 0.723743877823257), ('classifier__base_estimator__min_impurity_decrease', 0.032245138689122536), ('classifier__base_estimator__min_samples_leaf', 2), ('classifier__base_estimator__min_samples_split', 4), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4754070588737397), ('classifier__base_estimator__n_estimators', 5541), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 3), ('classifier__max_iter', 4), ('classifier__threshold', 0.6382842261444804), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 102), ('dimension_reduction__n_components', 102), ('dimension_reduction__n_oversamples', 99), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 85.68104561547597), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -65.39193030740913), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 95), ('imputer__max_iter', 42), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 99), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', 51.37280825476583), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.850594143065545), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0064098559240157674), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 512), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 128), ('classifier__base_estimator__max_samples', 0.5177621107015489), ('classifier__base_estimator__min_impurity_decrease', 0.04559381604554626), ('classifier__base_estimator__min_samples_leaf', 3), ('classifier__base_estimator__min_samples_split', 5), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3640740113614404), ('classifier__base_estimator__n_estimators', 5102), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 7), ('classifier__max_iter', 14), ('classifier__threshold', 0.5039046188914431), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 31), ('dimension_reduction__n_components', 45), ('dimension_reduction__n_oversamples', 0), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 50.52226819424945), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 63.16427936862641), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 63), ('imputer__max_iter', 55), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 58), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', 29.915586238751757), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.8668538190744016), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l1'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.031389303612554424), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 1024), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 8), ('classifier__base_estimator__max_samples', 0.1652356269349077), ('classifier__base_estimator__min_impurity_decrease', 0.0007754873911248206), ('classifier__base_estimator__min_samples_leaf', 7), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.02210477003265904), ('classifier__base_estimator__n_estimators', 4031), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 10), ('classifier__max_iter', 14), ('classifier__threshold', 0.7470834202652391), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 103), ('dimension_reduction__n_components', 55), ('dimension_reduction__n_oversamples', 25), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 100.0), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 96.27835043079028), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 65), ('imputer__max_iter', 5), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 41), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 22.642493058962728), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.35483194479039576), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0483335799855888), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 4096), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 32), ('classifier__base_estimator__max_samples', 0.8828478617105116), ('classifier__base_estimator__min_impurity_decrease', 0.0757481254279509), ('classifier__base_estimator__min_samples_leaf', 3), ('classifier__base_estimator__min_samples_split', 6), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3138071689572564), ('classifier__base_estimator__n_estimators', 10000), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 3), ('classifier__max_iter', 13), ('classifier__threshold', 0.6196423625114574), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 69), ('dimension_reduction__n_components', 28), ('dimension_reduction__n_oversamples', 100), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -56.381202690730895), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 26.82836088560873), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 97), ('imputer__max_iter', 22), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 80), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 45.53947644622244), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.5822017772423808), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.039573585052656235), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 8), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.41419928572422177), ('classifier__base_estimator__min_impurity_decrease', 0.022257698524112638), ('classifier__base_estimator__min_samples_leaf', 3), ('classifier__base_estimator__min_samples_split', 13), ('classifier__base_estimator__min_weight_fraction_leaf', 0.032875542487693844), ('classifier__base_estimator__n_estimators', 3825), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 1), ('classifier__max_iter', None), ('classifier__threshold', 0.5316958303541018), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 41), ('dimension_reduction__n_components', 149), ('dimension_reduction__n_oversamples', 85), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', 9.228526100784677), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -75.37875120243135), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 7), ('imputer__max_iter', 26), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 29), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'constant'), ('imputer__tol', -68.78526621444612), ('imputer__weights', 'distance'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.13817303384720944), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l1'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.009303249737590382), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 8192), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.2999951248149385), ('classifier__base_estimator__min_impurity_decrease', 0.012434601037615423), ('classifier__base_estimator__min_samples_leaf', 6), ('classifier__base_estimator__min_samples_split', 6), ('classifier__base_estimator__min_weight_fraction_leaf', 0.24132546928728102), ('classifier__base_estimator__n_estimators', 10000), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 2), ('classifier__max_iter', 8), ('classifier__threshold', 0.5127492288329669), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 52), ('dimension_reduction__n_components', 111), ('dimension_reduction__n_oversamples', 39), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -4.749354716034631), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 68.58876108097911), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 90), ('imputer__max_iter', 28), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 16), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', 63.32614059045997), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.5055280760398082), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04396941280680388), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', None), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.0896154092803311), ('classifier__base_estimator__min_samples_leaf', 16), ('classifier__base_estimator__min_samples_split', 16), ('classifier__base_estimator__min_weight_fraction_leaf', 0.08239504916468121), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 1), ('classifier__max_iter', 6), ('classifier__threshold', 0.75), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 121), ('dimension_reduction__n_components', 48), ('dimension_reduction__n_oversamples', 100), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 78.79725858094491), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 16.192606738522343), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 6), ('imputer__max_iter', 49), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 28), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -0.6396024748694344), ('imputer__weights', 'distance'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.0), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03887398436213335), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 32), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 8), ('classifier__base_estimator__max_samples', 0.10748065552586547), ('classifier__base_estimator__min_impurity_decrease', 0.012834933332587232), ('classifier__base_estimator__min_samples_leaf', 4), ('classifier__base_estimator__min_samples_split', 12), ('classifier__base_estimator__min_weight_fraction_leaf', 0.17741132151762987), ('classifier__base_estimator__n_estimators', 9088), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 14), ('classifier__max_iter', 4), ('classifier__threshold', 0.6651308687988673), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 17), ('dimension_reduction__n_components', 34), ('dimension_reduction__n_oversamples', 74), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', 53.94571942701893), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 63.61933427752507), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 80), ('imputer__max_iter', 100), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 29), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', -94.21945374909816), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.9871418520113087), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.05), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 1), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.0), ('classifier__base_estimator__min_samples_leaf', 16), ('classifier__base_estimator__min_samples_split', 16), ('classifier__base_estimator__min_weight_fraction_leaf', 0.0), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 7), ('classifier__max_iter', None), ('classifier__threshold', 0.5), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 29), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 0), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', -100.0), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 100.0), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 68), ('imputer__max_iter', 88), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 1), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -54.193313133777494), ('imputer__weights', 'distance'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.0), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.01668612730457688), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 1), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 16384), ('classifier__base_estimator__max_samples', 0.11823319333690419), ('classifier__base_estimator__min_impurity_decrease', 0.06036800016934473), ('classifier__base_estimator__min_samples_leaf', 12), ('classifier__base_estimator__min_samples_split', 3), ('classifier__base_estimator__min_weight_fraction_leaf', 0.30861743987602624), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 4), ('classifier__max_iter', 13), ('classifier__threshold', 0.5292117169152273), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 17), ('dimension_reduction__n_components', 127), ('dimension_reduction__n_oversamples', 55), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -18.12536234529948), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -15.830159874879442), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 89), ('imputer__max_iter', 60), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 25), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'constant'), ('imputer__tol', -36.82349322990907), ('imputer__weights', 'distance'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.248736887281221), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03891381105180706), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 64), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 256), ('classifier__base_estimator__max_samples', 0.4075625686021834), ('classifier__base_estimator__min_impurity_decrease', 0.009511176274259674), ('classifier__base_estimator__min_samples_leaf', 9), ('classifier__base_estimator__min_samples_split', 9), ('classifier__base_estimator__min_weight_fraction_leaf', 0.31204980446145264), ('classifier__base_estimator__n_estimators', 5997), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 8), ('classifier__max_iter', 2), ('classifier__threshold', 0.637578752437232), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 81), ('dimension_reduction__n_components', 45), ('dimension_reduction__n_oversamples', 16), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', -93.33429363678974), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 80.55750594995905), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 21), ('imputer__max_iter', 75), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 2), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', -1.6604745790906037), ('imputer__weights', 'distance'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.42749451904251856), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04868485451712776), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 64), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 512), ('classifier__base_estimator__max_samples', 1.0), ('classifier__base_estimator__min_impurity_decrease', 0.05960499153808816), ('classifier__base_estimator__min_samples_leaf', 4), ('classifier__base_estimator__min_samples_split', 7), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3411137464101451), ('classifier__base_estimator__n_estimators', 8248), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 6), ('classifier__max_iter', 14), ('classifier__threshold', 0.7448436870139978), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 5), ('dimension_reduction__n_components', 5), ('dimension_reduction__n_oversamples', 6), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -78.42520077754514), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 0.4823081617360714), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 53), ('imputer__max_iter', 94), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 7), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'median'), ('imputer__tol', -46.01007817573974), ('imputer__weights', 'uniform'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.7467533919442635), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.015459724353075641), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 32), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 1.0), ('classifier__base_estimator__min_impurity_decrease', 0.025391090143258317), ('classifier__base_estimator__min_samples_leaf', 14), ('classifier__base_estimator__min_samples_split', 2), ('classifier__base_estimator__min_weight_fraction_leaf', 0.5), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 7), ('classifier__max_iter', 0), ('classifier__threshold', 0.75), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 150), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 0), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', 100.0), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -64.82263955073182), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 100), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 36), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 76.17762328075588), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 1.0), ('scale__method', 'box-cox'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.024877798381721206), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 8), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 64), ('classifier__base_estimator__max_samples', 0.2950293696296633), ('classifier__base_estimator__min_impurity_decrease', 0.07087485004412841), ('classifier__base_estimator__min_samples_leaf', 9), ('classifier__base_estimator__min_samples_split', 15), ('classifier__base_estimator__min_weight_fraction_leaf', 0.22097711015474986), ('classifier__base_estimator__n_estimators', 2250), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 14), ('classifier__max_iter', 4), ('classifier__threshold', 0.5076529319852232), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 38), ('dimension_reduction__n_components', 67), ('dimension_reduction__n_oversamples', 90), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -30.442358452230238), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -51.987377346458985), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 64), ('imputer__max_iter', 4), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 91), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', -28.949328955804006), ('imputer__weights', 'distance'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.18345036917198168), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.041027996535113485), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 512), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 64), ('classifier__base_estimator__max_samples', 0.9831276830674394), ('classifier__base_estimator__min_impurity_decrease', 0.09453975161569911), ('classifier__base_estimator__min_samples_leaf', 11), ('classifier__base_estimator__min_samples_split', 13), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4488833660839127), ('classifier__base_estimator__n_estimators', 4850), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 15), ('classifier__max_iter', 1), ('classifier__threshold', 0.646793101045839), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 21), ('dimension_reduction__n_components', 44), ('dimension_reduction__n_oversamples', 98), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', 35.55633717807834), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -9.11919533266088), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 35), ('imputer__max_iter', 54), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 72), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 20.763153324310508), ('imputer__weights', 'distance'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.7238279805166724), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03693098138468961), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 8192), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 32), ('classifier__base_estimator__max_samples', 0.5986740817824135), ('classifier__base_estimator__min_impurity_decrease', 0.03221185023668931), ('classifier__base_estimator__min_samples_leaf', 14), ('classifier__base_estimator__min_samples_split', 4), ('classifier__base_estimator__min_weight_fraction_leaf', 0.10744779729834811), ('classifier__base_estimator__n_estimators', 9137), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 16), ('classifier__max_iter', 6), ('classifier__threshold', 0.698894464718279), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 145), ('dimension_reduction__n_components', 89), ('dimension_reduction__n_oversamples', 40), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -18.273251726003423), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -72.24845070556016), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 50), ('imputer__max_iter', 94), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 54), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -86.49889296857367), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.029021867994102675), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', None), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 8192), ('classifier__base_estimator__max_samples', 0.34164983434936047), ('classifier__base_estimator__min_impurity_decrease', 0.08014791297813552), ('classifier__base_estimator__min_samples_leaf', 1), ('classifier__base_estimator__min_samples_split', 16), ('classifier__base_estimator__min_weight_fraction_leaf', 0.0), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 12), ('classifier__max_iter', 0), ('classifier__threshold', 0.6806769397080243), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 6), ('dimension_reduction__n_components', 34), ('dimension_reduction__n_oversamples', 11), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 19.993631660824036), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 67.9018447383203), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 1), ('imputer__max_iter', 38), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 1), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -61.505156819669324), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 0.0), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.021720574598550087), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', None), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.021812088458986936), ('classifier__base_estimator__min_samples_leaf', 5), ('classifier__base_estimator__min_samples_split', 16), ('classifier__base_estimator__min_weight_fraction_leaf', 0.0), ('classifier__base_estimator__n_estimators', 10000), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 16), ('classifier__max_iter', 3), ('classifier__threshold', 0.7394942748203954), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 150), ('dimension_reduction__n_components', 44), ('dimension_reduction__n_oversamples', 0), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -100.0), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 85.99816295976945), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 100), ('imputer__max_iter', 100), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 100), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'constant'), ('imputer__tol', 100.0), ('imputer__weights', 'uniform'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.8873941298488166), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03313589113052087), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 256), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 16), ('classifier__base_estimator__max_samples', 0.15558958214978102), ('classifier__base_estimator__min_impurity_decrease', 0.06891784178649439), ('classifier__base_estimator__min_samples_leaf', 5), ('classifier__base_estimator__min_samples_split', 10), ('classifier__base_estimator__min_weight_fraction_leaf', 0.19395288260868035), ('classifier__base_estimator__n_estimators', 5683), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 5), ('classifier__max_iter', 9), ('classifier__threshold', 0.6585030038772779), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 55), ('dimension_reduction__n_components', 133), ('dimension_reduction__n_oversamples', 1), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -99.9717759480049), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -60.35693918824593), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 84), ('imputer__max_iter', 80), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 19), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', 37.64473377162912), ('imputer__weights', 'uniform'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.3043440151973457), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.014351179632211242), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 1), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.003804255305996584), ('classifier__base_estimator__min_samples_leaf', 16), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.29208912104902757), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 1), ('classifier__max_iter', None), ('classifier__threshold', 0.6156237012419106), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 150), ('dimension_reduction__n_components', 126), ('dimension_reduction__n_oversamples', 95), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 14.53256695044496), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 53.024604729348766), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 4), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 14), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', -47.119429731219896), ('imputer__weights', 'distance'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.8910637979115459), ('scale__method', 'box-cox'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 1), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.0), ('classifier__base_estimator__min_samples_leaf', 16), ('classifier__base_estimator__min_samples_split', 3), ('classifier__base_estimator__min_weight_fraction_leaf', 0.0), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 16), ('classifier__max_iter', 0), ('classifier__threshold', 0.5), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 150), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 0), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 100.0), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -100.0), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 1), ('imputer__max_iter', 100), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 1), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'constant'), ('imputer__tol', -100.0), ('imputer__weights', 'distance'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 1.0), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0049477570771137664), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 1024), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 4096), ('classifier__base_estimator__max_samples', 0.1612319588358051), ('classifier__base_estimator__min_impurity_decrease', 0.011102086920459343), ('classifier__base_estimator__min_samples_leaf', 15), ('classifier__base_estimator__min_samples_split', 9), ('classifier__base_estimator__min_weight_fraction_leaf', 0.1769653624301375), ('classifier__base_estimator__n_estimators', 663), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 7), ('classifier__max_iter', 3), ('classifier__threshold', 0.6687636904693868), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 60), ('dimension_reduction__n_components', 148), ('dimension_reduction__n_oversamples', 36), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 91.12548293899638), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -37.782638604148424), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 51), ('imputer__max_iter', 83), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 36), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', -3.657039802767599), ('imputer__weights', 'distance'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.39775465917878294), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.02173311164596413), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 8192), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 8), ('classifier__base_estimator__max_samples', 0.9746061472074955), ('classifier__base_estimator__min_impurity_decrease', 0.02874898344768899), ('classifier__base_estimator__min_samples_leaf', 6), ('classifier__base_estimator__min_samples_split', 13), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4587949058586799), ('classifier__base_estimator__n_estimators', 5338), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 14), ('classifier__max_iter', 11), ('classifier__threshold', 0.7023529621646156), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 146), ('dimension_reduction__n_components', 52), ('dimension_reduction__n_oversamples', 35), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', -82.01274366533472), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 48.65843239709133), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 22), ('imputer__max_iter', 36), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 66), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', 22.379282765206128), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.8014254342192334), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 4096), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 16384), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.0972874054724196), ('classifier__base_estimator__min_samples_leaf', 5), ('classifier__base_estimator__min_samples_split', 16), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4882467726610227), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 10), ('classifier__max_iter', 11), ('classifier__threshold', 0.6506328799037688), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 62), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 51), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -3.2355603955794123), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 17.353632831278404), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 23), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 94), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'constant'), ('imputer__tol', 100.0), ('imputer__weights', 'distance'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 0.0), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.01826681510825699), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 512), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 32), ('classifier__base_estimator__max_samples', 0.8755352103796268), ('classifier__base_estimator__min_impurity_decrease', 0.08556117433380478), ('classifier__base_estimator__min_samples_leaf', 2), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.45828262849965984), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 10), ('classifier__max_iter', 13), ('classifier__threshold', 0.6696338457579569), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 80), ('dimension_reduction__n_components', 120), ('dimension_reduction__n_oversamples', 22), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -38.076373846467284), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -51.68329242946736), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 89), ('imputer__max_iter', 57), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 36), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'constant'), ('imputer__tol', 6.813360963514569), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.30981981274267684), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l1'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.01674689615717267), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 4), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 16), ('classifier__base_estimator__max_samples', 0.6951435932516096), ('classifier__base_estimator__min_impurity_decrease', 0.06646401719029277), ('classifier__base_estimator__min_samples_leaf', 9), ('classifier__base_estimator__min_samples_split', 13), ('classifier__base_estimator__min_weight_fraction_leaf', 0.25024769295724925), ('classifier__base_estimator__n_estimators', 9843), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 7), ('classifier__max_iter', 10), ('classifier__threshold', 0.6712202178543196), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 122), ('dimension_reduction__n_components', 140), ('dimension_reduction__n_oversamples', 46), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -67.19047558425405), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -51.03671494334209), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 78), ('imputer__max_iter', 100), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 96), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', -70.84821018087293), ('imputer__weights', 'distance'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.27502992723819236), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 1), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 2048), ('classifier__base_estimator__max_samples', 0.07081983274584981), ('classifier__base_estimator__min_impurity_decrease', 0.0867402290641367), ('classifier__base_estimator__min_samples_leaf', 16), ('classifier__base_estimator__min_samples_split', 4), ('classifier__base_estimator__min_weight_fraction_leaf', 0.10520538440481296), ('classifier__base_estimator__n_estimators', 7855), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 12), ('classifier__max_iter', 0), ('classifier__threshold', 0.6873786686099352), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 90), ('dimension_reduction__n_components', 2), ('dimension_reduction__n_oversamples', 100), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 2.086439629883415), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 100.0), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 1), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 100), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 29.39602609392216), ('imputer__weights', 'uniform'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.1604084592889325), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0014794052820630568), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 4), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 8), ('classifier__base_estimator__max_samples', 0.9488002903493747), ('classifier__base_estimator__min_impurity_decrease', 0.03490094277291121), ('classifier__base_estimator__min_samples_leaf', 13), ('classifier__base_estimator__min_samples_split', 4), ('classifier__base_estimator__min_weight_fraction_leaf', 0.15682163856116865), ('classifier__base_estimator__n_estimators', 3807), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 9), ('classifier__max_iter', 11), ('classifier__threshold', 0.7417832209057583), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 37), ('dimension_reduction__n_components', 125), ('dimension_reduction__n_oversamples', 27), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -13.966028383947389), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -31.652572871548955), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 36), ('imputer__max_iter', 90), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 14), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 77.78265540979464), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 0.4929961295836826), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 64), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 4), ('classifier__base_estimator__max_samples', 0.5350352693681951), ('classifier__base_estimator__min_impurity_decrease', 0.01728860390537244), ('classifier__base_estimator__min_samples_leaf', 4), ('classifier__base_estimator__min_samples_split', 10), ('classifier__base_estimator__min_weight_fraction_leaf', 0.16296559354223678), ('classifier__base_estimator__n_estimators', 4258), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 15), ('classifier__max_iter', 12), ('classifier__threshold', 0.6154799335495321), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 32), ('dimension_reduction__n_components', 7), ('dimension_reduction__n_oversamples', 31), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 38.885140428553115), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 44.90690419476118), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 32), ('imputer__max_iter', 48), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 76), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 42.90740477404583), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.6401975652836016), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.015220299824972845), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 4096), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 256), ('classifier__base_estimator__max_samples', 0.4629808335338564), ('classifier__base_estimator__min_impurity_decrease', 0.04773973964852146), ('classifier__base_estimator__min_samples_leaf', 8), ('classifier__base_estimator__min_samples_split', 2), ('classifier__base_estimator__min_weight_fraction_leaf', 0.47941225552748373), ('classifier__base_estimator__n_estimators', 9817), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 3), ('classifier__max_iter', 11), ('classifier__threshold', 0.5731614960966808), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 85), ('dimension_reduction__n_components', 111), ('dimension_reduction__n_oversamples', 24), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 19.083617745831475), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 3.8287461444173516), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 24), ('imputer__max_iter', 23), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 14), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', 32.877701705331106), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.8555749867114244), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.02823085875134609), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 32), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 1024), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.1), ('classifier__base_estimator__min_samples_leaf', 10), ('classifier__base_estimator__min_samples_split', 8), ('classifier__base_estimator__min_weight_fraction_leaf', 0.0), ('classifier__base_estimator__n_estimators', 2570), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 3), ('classifier__max_iter', 14), ('classifier__threshold', 0.539725217869334), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 39), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 41), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -2.3970810133078686), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -42.39969115436172), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 100), ('imputer__max_iter', 60), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 1), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'median'), ('imputer__tol', 53.95113845343687), ('imputer__weights', 'uniform'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.262528631955996), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.02081069176063202), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 64), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.7288495259372036), ('classifier__base_estimator__min_impurity_decrease', 0.012509957653720361), ('classifier__base_estimator__min_samples_leaf', 16), ('classifier__base_estimator__min_samples_split', 9), ('classifier__base_estimator__min_weight_fraction_leaf', 0.11100660529046438), ('classifier__base_estimator__n_estimators', 5129), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 1), ('classifier__max_iter', 9), ('classifier__threshold', 0.5790478841304313), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 22), ('dimension_reduction__n_components', 148), ('dimension_reduction__n_oversamples', 46), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 59.18813333283305), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -84.98060713784159), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 10), ('imputer__max_iter', 56), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 12), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'constant'), ('imputer__tol', 4.365525934532812), ('imputer__weights', 'distance'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.5855176663013949), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.02847269822176986), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 32), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 4), ('classifier__base_estimator__max_samples', 0.13364740400184588), ('classifier__base_estimator__min_impurity_decrease', 0.08788089404724024), ('classifier__base_estimator__min_samples_leaf', 10), ('classifier__base_estimator__min_samples_split', 13), ('classifier__base_estimator__min_weight_fraction_leaf', 0.2702159636614923), ('classifier__base_estimator__n_estimators', 6405), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 15), ('classifier__max_iter', 14), ('classifier__threshold', 0.7194785597195084), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 133), ('dimension_reduction__n_components', 105), ('dimension_reduction__n_oversamples', 50), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -55.22635501840269), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 46.93443165364164), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 24), ('imputer__max_iter', 84), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 100), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', -98.0059127804199), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.540045865423442), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.005020744127480157), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 2), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.1844816033910051), ('classifier__base_estimator__min_impurity_decrease', 0.02168243152966881), ('classifier__base_estimator__min_samples_leaf', 7), ('classifier__base_estimator__min_samples_split', 7), ('classifier__base_estimator__min_weight_fraction_leaf', 0.025002389093346816), ('classifier__base_estimator__n_estimators', 5310), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 16), ('classifier__max_iter', 2), ('classifier__threshold', 0.5688624631018486), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 104), ('dimension_reduction__n_components', 87), ('dimension_reduction__n_oversamples', 76), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -48.473845115792045), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -67.06211809065985), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 15), ('imputer__max_iter', 41), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 39), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 81.86726064657012), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 0.35183439792686516), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l1'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.020969413254787583), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 1), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.1), ('classifier__base_estimator__min_samples_leaf', 8), ('classifier__base_estimator__min_samples_split', 7), ('classifier__base_estimator__min_weight_fraction_leaf', 0.0), ('classifier__base_estimator__n_estimators', 9630), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 1), ('classifier__max_iter', None), ('classifier__threshold', 0.5), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 2), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 98), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -100.0), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -100.0), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 59), ('imputer__max_iter', 100), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 71), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'constant'), ('imputer__tol', -100.0), ('imputer__weights', 'uniform'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.0), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.05), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', None), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 2048), ('classifier__base_estimator__max_samples', 1.0), ('classifier__base_estimator__min_impurity_decrease', 0.04307532937394737), ('classifier__base_estimator__min_samples_leaf', 14), ('classifier__base_estimator__min_samples_split', 2), ('classifier__base_estimator__min_weight_fraction_leaf', 0.48607827836570533), ('classifier__base_estimator__n_estimators', 10000), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 1), ('classifier__max_iter', 2), ('classifier__threshold', 0.722484043633831), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 150), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 100), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -26.15760159937956), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 59.99370470365369), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 67), ('imputer__max_iter', 24), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 81), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'constant'), ('imputer__tol', 37.87012108961514), ('imputer__weights', 'distance'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.0), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.05), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 1), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 8192), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.1), ('classifier__base_estimator__min_samples_leaf', 1), ('classifier__base_estimator__min_samples_split', 2), ('classifier__base_estimator__min_weight_fraction_leaf', 0.0), ('classifier__base_estimator__n_estimators', 7277), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 1), ('classifier__max_iter', 13), ('classifier__threshold', 0.699299116414055), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 2), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 0), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 15.563625357346382), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -100.0), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 100), ('imputer__max_iter', 100), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 1), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'constant'), ('imputer__tol', 100.0), ('imputer__weights', 'uniform'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.0), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.05), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 8192), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 256), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.0), ('classifier__base_estimator__min_samples_leaf', 14), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.0), ('classifier__base_estimator__n_estimators', 10000), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 16), ('classifier__max_iter', 0), ('classifier__threshold', 0.5962230639547501), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 2), ('dimension_reduction__n_components', 131), ('dimension_reduction__n_oversamples', 78), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -100.0), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 100.0), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 100), ('imputer__max_iter', 44), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 1), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', 100.0), ('imputer__weights', 'distance'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.21769507834251506), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.003092151987956214), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 2048), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.24534492347799625), ('classifier__base_estimator__min_impurity_decrease', 0.009084535631808737), ('classifier__base_estimator__min_samples_leaf', 9), ('classifier__base_estimator__min_samples_split', 16), ('classifier__base_estimator__min_weight_fraction_leaf', 0.11344609997372015), ('classifier__base_estimator__n_estimators', 3092), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 13), ('classifier__max_iter', 7), ('classifier__threshold', 0.6402005830780368), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 129), ('dimension_reduction__n_components', 13), ('dimension_reduction__n_oversamples', 54), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 75.58868516271244), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 99.78877390752501), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 9), ('imputer__max_iter', 23), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 100), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', 92.19818173094288), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.14958687139709873), ('scale__method', 'box-cox'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04580776243543739), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 1024), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.3170762839572348), ('classifier__base_estimator__min_impurity_decrease', 0.06820331895530884), ('classifier__base_estimator__min_samples_leaf', 9), ('classifier__base_estimator__min_samples_split', 13), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3781538120925332), ('classifier__base_estimator__n_estimators', 2785), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 1), ('classifier__max_iter', 3), ('classifier__threshold', 0.5363314117678512), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 132), ('dimension_reduction__n_components', 26), ('dimension_reduction__n_oversamples', 96), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 65.27468802683342), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 61.65740946179429), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 31), ('imputer__max_iter', 43), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 26), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', 37.75596176910534), ('imputer__weights', 'uniform'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.6946551162757073), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03890494754487908), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 512), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.45897577909699117), ('classifier__base_estimator__min_impurity_decrease', 0.09311543743527236), ('classifier__base_estimator__min_samples_leaf', 15), ('classifier__base_estimator__min_samples_split', 14), ('classifier__base_estimator__min_weight_fraction_leaf', 0.09178860355159946), ('classifier__base_estimator__n_estimators', 2884), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 14), ('classifier__max_iter', 2), ('classifier__threshold', 0.6371041931930845), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 58), ('dimension_reduction__n_components', 96), ('dimension_reduction__n_oversamples', 90), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -41.50748869279626), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -26.25937492008954), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 53), ('imputer__max_iter', 80), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 91), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'constant'), ('imputer__tol', 58.96871577918657), ('imputer__weights', 'distance'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.12040947605375447), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.015534045041368093), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 8192), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 0.5506851348063628), ('classifier__base_estimator__min_impurity_decrease', 0.1), ('classifier__base_estimator__min_samples_leaf', 7), ('classifier__base_estimator__min_samples_split', 14), ('classifier__base_estimator__min_weight_fraction_leaf', 0.20182213719383246), ('classifier__base_estimator__n_estimators', 5560), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 1), ('classifier__max_iter', 4), ('classifier__threshold', 0.7445258593772852), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 45), ('dimension_reduction__n_components', 144), ('dimension_reduction__n_oversamples', 74), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 86.47247979077463), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 16.002748336160693), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 41), ('imputer__max_iter', 5), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 31), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'median'), ('imputer__tol', 13.14341858680423), ('imputer__weights', 'distance'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.19832717811631762), ('scale__method', 'box-cox'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.05), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 16), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 32), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.08119018544644269), ('classifier__base_estimator__min_samples_leaf', 1), ('classifier__base_estimator__min_samples_split', 2), ('classifier__base_estimator__min_weight_fraction_leaf', 0.1233297014575763), ('classifier__base_estimator__n_estimators', 8357), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 1), ('classifier__max_iter', 2), ('classifier__threshold', 0.75), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 2), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 0), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 2.9248887479690353), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -100.0), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 100), ('imputer__max_iter', 100), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 1), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'constant'), ('imputer__tol', -22.375827434718502), ('imputer__weights', 'uniform'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.0), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04132818524616544), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 4096), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 1.0), ('classifier__base_estimator__min_impurity_decrease', 0.05921198418252858), ('classifier__base_estimator__min_samples_leaf', 6), ('classifier__base_estimator__min_samples_split', 9), ('classifier__base_estimator__min_weight_fraction_leaf', 0.5), ('classifier__base_estimator__n_estimators', 5332), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 10), ('classifier__max_iter', 7), ('classifier__threshold', 0.582087660712409), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 108), ('dimension_reduction__n_components', 145), ('dimension_reduction__n_oversamples', 9), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -45.630876442319014), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -27.486597140595194), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 92), ('imputer__max_iter', 100), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 100), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', 94.7720236546858), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 0.0), ('scale__method', 'box-cox'), ('scale__norm', 'l1'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.009412818874284202), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 4), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 0.2253334243420495), ('classifier__base_estimator__min_impurity_decrease', 0.050570046668199226), ('classifier__base_estimator__min_samples_leaf', 6), ('classifier__base_estimator__min_samples_split', 10), ('classifier__base_estimator__min_weight_fraction_leaf', 0.04848112188347236), ('classifier__base_estimator__n_estimators', 9719), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 11), ('classifier__max_iter', 6), ('classifier__threshold', 0.559110383543598), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 91), ('dimension_reduction__n_components', 94), ('dimension_reduction__n_oversamples', 66), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -65.82832317882853), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 57.38328969334617), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 50), ('imputer__max_iter', 76), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 100), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', -23.753769073309883), ('imputer__weights', 'distance'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 0.8640476940179803), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.022214262564537082), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 4096), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 8192), ('classifier__base_estimator__max_samples', 0.29159319149877116), ('classifier__base_estimator__min_impurity_decrease', 0.0), ('classifier__base_estimator__min_samples_leaf', 5), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4380339436477175), ('classifier__base_estimator__n_estimators', 2970), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 4), ('classifier__max_iter', 6), ('classifier__threshold', 0.6939682308529725), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 2), ('dimension_reduction__n_components', 118), ('dimension_reduction__n_oversamples', 14), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 54.06708059271244), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 6.107494371338021), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 82), ('imputer__max_iter', 100), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 87), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', 95.82664217507568), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.48362398789226546), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.030084797065635105), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 8), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 8192), ('classifier__base_estimator__max_samples', 0.3470375864740168), ('classifier__base_estimator__min_impurity_decrease', 0.07872600337627776), ('classifier__base_estimator__min_samples_leaf', 5), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.0005658792436429435), ('classifier__base_estimator__n_estimators', 2512), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 1), ('classifier__max_iter', 14), ('classifier__threshold', 0.5329058827535326), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 27), ('dimension_reduction__n_components', 44), ('dimension_reduction__n_oversamples', 55), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 54.104388278982185), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -31.76221496741259), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 37), ('imputer__max_iter', 41), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 1), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', -73.75328577265043), ('imputer__weights', 'uniform'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.9994708277197224), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.01473908905705996), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 16), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.9944460555914354), ('classifier__base_estimator__min_impurity_decrease', 0.08284238379137854), ('classifier__base_estimator__min_samples_leaf', 5), ('classifier__base_estimator__min_samples_split', 5), ('classifier__base_estimator__min_weight_fraction_leaf', 0.23468487210927952), ('classifier__base_estimator__n_estimators', 3778), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 16), ('classifier__max_iter', 8), ('classifier__threshold', 0.5024546745336296), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 138), ('dimension_reduction__n_components', 88), ('dimension_reduction__n_oversamples', 7), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -90.15157546177838), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 84.2665286235027), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 74), ('imputer__max_iter', 99), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 33), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', -17.086320021880226), ('imputer__weights', 'distance'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.45867325544473947), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.022824328487176217), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 32), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 8192), ('classifier__base_estimator__max_samples', 0.7386396523498331), ('classifier__base_estimator__min_impurity_decrease', 9.759223505243429e-05), ('classifier__base_estimator__min_samples_leaf', 8), ('classifier__base_estimator__min_samples_split', 16), ('classifier__base_estimator__min_weight_fraction_leaf', 0.16438998431596463), ('classifier__base_estimator__n_estimators', 4058), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 9), ('classifier__max_iter', 0), ('classifier__threshold', 0.5913679486225112), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 94), ('dimension_reduction__n_components', 136), ('dimension_reduction__n_oversamples', 60), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -9.09700647607724), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 66.28847477138675), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 85), ('imputer__max_iter', 55), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 100), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'median'), ('imputer__tol', 26.79770828438302), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.7792387561588191), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.034656814781857774), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 2), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.4872336571520421), ('classifier__base_estimator__min_impurity_decrease', 0.01573536095553335), ('classifier__base_estimator__min_samples_leaf', 3), ('classifier__base_estimator__min_samples_split', 15), ('classifier__base_estimator__min_weight_fraction_leaf', 0.10869786644862542), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 6), ('classifier__max_iter', None), ('classifier__threshold', 0.6242300938650717), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 82), ('dimension_reduction__n_components', 137), ('dimension_reduction__n_oversamples', 1), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -53.78398867709685), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -20.35690951849574), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 19), ('imputer__max_iter', 63), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 14), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 62.68485824432665), ('imputer__weights', 'uniform'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.23802859141676466), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.044416184071418494), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 2048), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 4), ('classifier__base_estimator__max_samples', 0.5349723681145876), ('classifier__base_estimator__min_impurity_decrease', 0.035306548257235275), ('classifier__base_estimator__min_samples_leaf', 7), ('classifier__base_estimator__min_samples_split', 14), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3933259919573702), ('classifier__base_estimator__n_estimators', 3971), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 1), ('classifier__max_iter', 15), ('classifier__threshold', 0.6322794080728061), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 53), ('dimension_reduction__n_components', 91), ('dimension_reduction__n_oversamples', 51), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -34.953997394864544), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 48.42855039247249), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 52), ('imputer__max_iter', 83), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 63), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', 61.457763958734176), ('imputer__weights', 'uniform'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.02942463762863013), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04241414672712576), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 16384), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 128), ('classifier__base_estimator__max_samples', 0.7360212409597009), ('classifier__base_estimator__min_impurity_decrease', 0.09868744319816143), ('classifier__base_estimator__min_samples_leaf', 13), ('classifier__base_estimator__min_samples_split', 10), ('classifier__base_estimator__min_weight_fraction_leaf', 0.15149049656777505), ('classifier__base_estimator__n_estimators', 6384), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 10), ('classifier__max_iter', 9), ('classifier__threshold', 0.6138455917140206), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 105), ('dimension_reduction__n_components', 41), ('dimension_reduction__n_oversamples', 86), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -11.579984023645935), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -51.923132350552265), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 44), ('imputer__max_iter', 79), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 30), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'median'), ('imputer__tol', -7.810596387420233), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.36491888008437706), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.017274257573882526), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 32), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 64), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.09225697305047373), ('classifier__base_estimator__min_samples_leaf', 8), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.044457263510632374), ('classifier__base_estimator__n_estimators', 2984), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 1), ('classifier__max_iter', 8), ('classifier__threshold', 0.5801386214097237), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 2), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 26), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -64.05546616970916), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -4.554979933174764), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 63), ('imputer__max_iter', 60), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 23), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', 51.50650328426448), ('imputer__weights', 'uniform'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.04090496917955924), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 256), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.8228985719830768), ('classifier__base_estimator__min_impurity_decrease', 0.06277439871700093), ('classifier__base_estimator__min_samples_leaf', 6), ('classifier__base_estimator__min_samples_split', 10), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4253981286828217), ('classifier__base_estimator__n_estimators', 1170), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 16), ('classifier__max_iter', 7), ('classifier__threshold', 0.695809626398972), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 32), ('dimension_reduction__n_components', 94), ('dimension_reduction__n_oversamples', 90), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 73.54318770756694), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 15.74688026064004), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 27), ('imputer__max_iter', 14), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 57), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', 47.08816776758124), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.1514075920931816), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.040177182043015354), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 1024), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.7076754746039373), ('classifier__base_estimator__min_impurity_decrease', 0.08967836479396413), ('classifier__base_estimator__min_samples_leaf', 11), ('classifier__base_estimator__min_samples_split', 7), ('classifier__base_estimator__min_weight_fraction_leaf', 0.24833862165331064), ('classifier__base_estimator__n_estimators', 3116), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 3), ('classifier__max_iter', 15), ('classifier__threshold', 0.5323467617225879), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 43), ('dimension_reduction__n_components', 104), ('dimension_reduction__n_oversamples', 55), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 83.21122186980782), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -22.420290830788986), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 71), ('imputer__max_iter', 8), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 25), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', 80.87011742139083), ('imputer__weights', 'uniform'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.7493717094621951), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.010385610332962682), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 512), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 0.14816684139327058), ('classifier__base_estimator__min_impurity_decrease', 0.07928585684989302), ('classifier__base_estimator__min_samples_leaf', 14), ('classifier__base_estimator__min_samples_split', 4), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3467674965293372), ('classifier__base_estimator__n_estimators', 9901), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 3), ('classifier__max_iter', 1), ('classifier__threshold', 0.7132178019131898), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 69), ('dimension_reduction__n_components', 145), ('dimension_reduction__n_oversamples', 5), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -85.67739653658641), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -83.14834821773962), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 9), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 86), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'median'), ('imputer__tol', -15.630479207588593), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.5688594454237762), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04550225592951889), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 256), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.5854282702509284), ('classifier__base_estimator__min_impurity_decrease', 0.06742550757722784), ('classifier__base_estimator__min_samples_leaf', 9), ('classifier__base_estimator__min_samples_split', 16), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4135319372961539), ('classifier__base_estimator__n_estimators', 2456), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 1), ('classifier__max_iter', 11), ('classifier__threshold', 0.5794437359724499), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 53), ('dimension_reduction__n_components', 107), ('dimension_reduction__n_oversamples', 80), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', -84.53919525548167), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 42.76022404112112), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 65), ('imputer__max_iter', 49), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 53), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', 65.16055124865557), ('imputer__weights', 'uniform'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.42872000623070605), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.022546826828609697), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 32), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 32), ('classifier__base_estimator__max_samples', 0.6361940595360598), ('classifier__base_estimator__min_impurity_decrease', 0.0059248802104598965), ('classifier__base_estimator__min_samples_leaf', 6), ('classifier__base_estimator__min_samples_split', 7), ('classifier__base_estimator__min_weight_fraction_leaf', 0.26929780406855724), ('classifier__base_estimator__n_estimators', 6276), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 13), ('classifier__max_iter', 9), ('classifier__threshold', 0.5368532636614686), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 4), ('dimension_reduction__n_components', 117), ('dimension_reduction__n_oversamples', 16), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 11.851643244692028), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 1.889355423605906), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 15), ('imputer__max_iter', 37), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 50), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 93.03756415469883), ('imputer__weights', 'uniform'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.5472454994095658), ('scale__method', 'box-cox'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03693984766779431), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 128), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 8192), ('classifier__base_estimator__max_samples', 0.7959620031285802), ('classifier__base_estimator__min_impurity_decrease', 0.035264430684055326), ('classifier__base_estimator__min_samples_leaf', 13), ('classifier__base_estimator__min_samples_split', 9), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3788186375398676), ('classifier__base_estimator__n_estimators', 8590), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 10), ('classifier__max_iter', 9), ('classifier__threshold', 0.7289458772930786), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 35), ('dimension_reduction__n_components', 26), ('dimension_reduction__n_oversamples', 47), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -3.0443868488617625), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 64.9414680909644), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 5), ('imputer__max_iter', 72), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 94), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'median'), ('imputer__tol', -76.52976036580124), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.09743900981305895), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.009947220988894265), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 4096), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 4), ('classifier__base_estimator__max_samples', 0.6988705567826781), ('classifier__base_estimator__min_impurity_decrease', 0.016184202376645182), ('classifier__base_estimator__min_samples_leaf', 6), ('classifier__base_estimator__min_samples_split', 9), ('classifier__base_estimator__min_weight_fraction_leaf', 0.14474338356682273), ('classifier__base_estimator__n_estimators', 5775), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 14), ('classifier__max_iter', 14), ('classifier__threshold', 0.5531904637151288), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 78), ('dimension_reduction__n_components', 148), ('dimension_reduction__n_oversamples', 74), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 99.76311941147159), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -44.18520721259775), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 53), ('imputer__max_iter', 51), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 18), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'constant'), ('imputer__tol', 13.430426441980842), ('imputer__weights', 'distance'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.9070087348638542), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.039965492088013706), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 2), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.1), ('classifier__base_estimator__min_samples_leaf', 15), ('classifier__base_estimator__min_samples_split', 12), ('classifier__base_estimator__min_weight_fraction_leaf', 0.015069239000375633), ('classifier__base_estimator__n_estimators', 10000), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 10), ('classifier__max_iter', 10), ('classifier__threshold', 0.5924057994180969), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 100), ('dimension_reduction__n_components', 2), ('dimension_reduction__n_oversamples', 43), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 24.32318023711852), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 10.775174133229172), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 13), ('imputer__max_iter', 28), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 68), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'median'), ('imputer__tol', -100.0), ('imputer__weights', 'uniform'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.8384182872005408), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.011393808629661002), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 1), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 128), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.0696759426458171), ('classifier__base_estimator__min_samples_leaf', 10), ('classifier__base_estimator__min_samples_split', 16), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3489567595068719), ('classifier__base_estimator__n_estimators', 5981), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 12), ('classifier__max_iter', 11), ('classifier__threshold', 0.5750041009918919), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 20), ('dimension_reduction__n_components', 120), ('dimension_reduction__n_oversamples', 47), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -53.78217445794018), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 40.61447164464809), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 63), ('imputer__max_iter', 36), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 100), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', 50.628085747775884), ('imputer__weights', 'distance'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.6318881849268593), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.01164320385606734), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 1), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 0.43821690551097997), ('classifier__base_estimator__min_impurity_decrease', 0.051748862007033984), ('classifier__base_estimator__min_samples_leaf', 11), ('classifier__base_estimator__min_samples_split', 9), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4046725295055145), ('classifier__base_estimator__n_estimators', 179), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 10), ('classifier__max_iter', 4), ('classifier__threshold', 0.5331921367256922), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 65), ('dimension_reduction__n_components', 64), ('dimension_reduction__n_oversamples', 12), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 95.12740572838737), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 81.46250298320905), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 100), ('imputer__max_iter', 17), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 17), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', -81.23999230070697), ('imputer__weights', 'distance'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.6785678196352792), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.030329271355040634), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 4), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.10291923834577946), ('classifier__base_estimator__min_impurity_decrease', 0.006795296740711969), ('classifier__base_estimator__min_samples_leaf', 7), ('classifier__base_estimator__min_samples_split', 8), ('classifier__base_estimator__min_weight_fraction_leaf', 0.342925773273852), ('classifier__base_estimator__n_estimators', 1417), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 14), ('classifier__max_iter', 13), ('classifier__threshold', 0.5389879048701982), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 21), ('dimension_reduction__n_components', 4), ('dimension_reduction__n_oversamples', 34), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 30.12628761652948), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -86.35859949552079), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 60), ('imputer__max_iter', 37), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 78), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', -78.40141581269481), ('imputer__weights', 'uniform'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.07241628091170603), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.005168123601738071), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 1), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 512), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.02633335810040994), ('classifier__base_estimator__min_samples_leaf', 1), ('classifier__base_estimator__min_samples_split', 7), ('classifier__base_estimator__min_weight_fraction_leaf', 0.46805575315109144), ('classifier__base_estimator__n_estimators', 525), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 11), ('classifier__max_iter', 12), ('classifier__threshold', 0.7295035575751783), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 76), ('dimension_reduction__n_components', 12), ('dimension_reduction__n_oversamples', 15), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 99.41266486572923), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -28.854880293943935), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 31), ('imputer__max_iter', 35), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 60), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', -72.11069499108648), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.022474188511930587), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04343557531023225), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 256), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 4), ('classifier__base_estimator__max_samples', 0.23578194119245321), ('classifier__base_estimator__min_impurity_decrease', 0.016184254482841356), ('classifier__base_estimator__min_samples_leaf', 2), ('classifier__base_estimator__min_samples_split', 15), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4159662268634556), ('classifier__base_estimator__n_estimators', 6929), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 2), ('classifier__max_iter', 7), ('classifier__threshold', 0.624460472798687), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 52), ('dimension_reduction__n_components', 129), ('dimension_reduction__n_oversamples', 25), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 78.53497748580992), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 22.0000480938249), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 77), ('imputer__max_iter', 8), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 26), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'constant'), ('imputer__tol', -65.12062983373562), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.6682912081638068), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.02341097800947596), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 8), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.0599406183805969), ('classifier__base_estimator__min_impurity_decrease', 0.04538650810999565), ('classifier__base_estimator__min_samples_leaf', 6), ('classifier__base_estimator__min_samples_split', 13), ('classifier__base_estimator__min_weight_fraction_leaf', 0.29590319877589977), ('classifier__base_estimator__n_estimators', 8152), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 12), ('classifier__max_iter', 9), ('classifier__threshold', 0.6126015996355788), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 129), ('dimension_reduction__n_components', 127), ('dimension_reduction__n_oversamples', 44), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -66.03440332902542), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 90.85084592396345), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 34), ('imputer__max_iter', 21), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 68), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', -49.584065571113435), ('imputer__weights', 'uniform'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.9147105155744162), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0009297965416111809), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 2048), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 1024), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.08405687090376784), ('classifier__base_estimator__min_samples_leaf', 13), ('classifier__base_estimator__min_samples_split', 3), ('classifier__base_estimator__min_weight_fraction_leaf', 0.19489969013832154), ('classifier__base_estimator__n_estimators', 6269), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 4), ('classifier__max_iter', 7), ('classifier__threshold', 0.5601549438268484), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 13), ('dimension_reduction__n_components', 87), ('dimension_reduction__n_oversamples', 81), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', -22.046648912880258), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 7.263163219754489), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 71), ('imputer__max_iter', 66), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 23), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', 47.32533260001472), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.7825334827146553), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.015255788042483624), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 2048), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 8), ('classifier__base_estimator__max_samples', 0.8615350943107326), ('classifier__base_estimator__min_impurity_decrease', 0.05064064174049825), ('classifier__base_estimator__min_samples_leaf', 4), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.2405792078244263), ('classifier__base_estimator__n_estimators', 6137), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 2), ('classifier__max_iter', 9), ('classifier__threshold', 0.6647167144070352), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 107), ('dimension_reduction__n_components', 27), ('dimension_reduction__n_oversamples', 53), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -44.8012154259851), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -84.33775398385326), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 39), ('imputer__max_iter', 96), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 32), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 94.60611206757176), ('imputer__weights', 'distance'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.8183518515184969), ('scale__method', 'box-cox'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.020809683495765462), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 512), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 0.49023702280295767), ('classifier__base_estimator__min_impurity_decrease', 0.06720581268029073), ('classifier__base_estimator__min_samples_leaf', 11), ('classifier__base_estimator__min_samples_split', 8), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3285057801219432), ('classifier__base_estimator__n_estimators', 1325), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 2), ('classifier__max_iter', 9), ('classifier__threshold', 0.7367655904384736), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 84), ('dimension_reduction__n_components', 138), ('dimension_reduction__n_oversamples', 61), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 63.88114613069794), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 10.15807123967511), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 93), ('imputer__max_iter', 34), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 79), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 34.5087369926799), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.6235455017140552), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 16), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 128), ('classifier__base_estimator__max_samples', 1.0), ('classifier__base_estimator__min_impurity_decrease', 0.1), ('classifier__base_estimator__min_samples_leaf', 11), ('classifier__base_estimator__min_samples_split', 7), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4691330521534413), ('classifier__base_estimator__n_estimators', 8808), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 16), ('classifier__max_iter', 3), ('classifier__threshold', 0.5884999463135886), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 131), ('dimension_reduction__n_components', 88), ('dimension_reduction__n_oversamples', 79), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 3.048178137280317), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 54.50973434711713), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 77), ('imputer__max_iter', 79), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 47), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 100.0), ('imputer__weights', 'distance'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.32785358236257345), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03433536765746779), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 8192), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.6894796281985365), ('classifier__base_estimator__min_impurity_decrease', 0.09250285118326325), ('classifier__base_estimator__min_samples_leaf', 4), ('classifier__base_estimator__min_samples_split', 5), ('classifier__base_estimator__min_weight_fraction_leaf', 0.2960150613476388), ('classifier__base_estimator__n_estimators', 6489), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 2), ('classifier__max_iter', 7), ('classifier__threshold', 0.6428594188334144), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 147), ('dimension_reduction__n_components', 93), ('dimension_reduction__n_oversamples', 86), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', -49.01517186878822), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -88.79859137620724), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 7), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 61), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', -55.7661458188485), ('imputer__weights', 'distance'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 0.5954861491595188), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.039401758828202585), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 4096), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.37860578821580554), ('classifier__base_estimator__min_impurity_decrease', 0.036996958670555795), ('classifier__base_estimator__min_samples_leaf', 14), ('classifier__base_estimator__min_samples_split', 12), ('classifier__base_estimator__min_weight_fraction_leaf', 0.22134478209966982), ('classifier__base_estimator__n_estimators', 6419), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 1), ('classifier__max_iter', 4), ('classifier__threshold', 0.7206803968165728), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 59), ('dimension_reduction__n_components', 146), ('dimension_reduction__n_oversamples', 31), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -14.925266092351109), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 33.28062578472378), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 37), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 19), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', 39.761612799643075), ('imputer__weights', 'uniform'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.39211644927949585), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0021194825781546286), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 2), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 256), ('classifier__base_estimator__max_samples', 0.6901942103180086), ('classifier__base_estimator__min_impurity_decrease', 0.03150040269086963), ('classifier__base_estimator__min_samples_leaf', 10), ('classifier__base_estimator__min_samples_split', 14), ('classifier__base_estimator__min_weight_fraction_leaf', 0.34398384258461506), ('classifier__base_estimator__n_estimators', 2170), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 9), ('classifier__max_iter', 7), ('classifier__threshold', 0.5166810076260174), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 95), ('dimension_reduction__n_components', 142), ('dimension_reduction__n_oversamples', 26), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -5.2829495572529055), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -57.583402533067925), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 74), ('imputer__max_iter', 100), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 24), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', 2.4169391833336533), ('imputer__weights', 'distance'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.36698751743925034), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.034095837136238566), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 2), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 0.7064695943546171), ('classifier__base_estimator__min_impurity_decrease', 0.04154907660864228), ('classifier__base_estimator__min_samples_leaf', 12), ('classifier__base_estimator__min_samples_split', 6), ('classifier__base_estimator__min_weight_fraction_leaf', 0.14776970993172614), ('classifier__base_estimator__n_estimators', 4787), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 10), ('classifier__max_iter', 12), ('classifier__threshold', 0.695266173469599), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 77), ('dimension_reduction__n_components', 141), ('dimension_reduction__n_oversamples', 33), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 89.72728858988168), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 41.98924333012863), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 89), ('imputer__max_iter', 36), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 25), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'constant'), ('imputer__tol', -65.10929539616313), ('imputer__weights', 'distance'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.6430126067627088), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.027425522144224102), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 256), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 1.0), ('classifier__base_estimator__min_impurity_decrease', 0.0020970030054190364), ('classifier__base_estimator__min_samples_leaf', 3), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3822242731624006), ('classifier__base_estimator__n_estimators', 3272), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 7), ('classifier__max_iter', 11), ('classifier__threshold', 0.5), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 32), ('dimension_reduction__n_components', 106), ('dimension_reduction__n_oversamples', 10), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -65.27661811983074), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 46.7523692824756), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 42), ('imputer__max_iter', 100), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 100), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -5.92414865652016), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.0), ('scale__method', 'box-cox'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.02001991473377683), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 1024), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 4), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.004331372719748366), ('classifier__base_estimator__min_samples_leaf', 6), ('classifier__base_estimator__min_samples_split', 10), ('classifier__base_estimator__min_weight_fraction_leaf', 0.46668056468032515), ('classifier__base_estimator__n_estimators', 1922), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 10), ('classifier__max_iter', 14), ('classifier__threshold', 0.7448737212686325), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 38), ('dimension_reduction__n_components', 60), ('dimension_reduction__n_oversamples', 57), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', 39.79591795505226), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -15.423151339564598), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 53), ('imputer__max_iter', 9), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 82), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'median'), ('imputer__tol', 38.86955918934484), ('imputer__weights', 'distance'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 1.0), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04121982005542652), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 128), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.4320986687326618), ('classifier__base_estimator__min_impurity_decrease', 0.09942188155193347), ('classifier__base_estimator__min_samples_leaf', 11), ('classifier__base_estimator__min_samples_split', 8), ('classifier__base_estimator__min_weight_fraction_leaf', 0.29327442840699247), ('classifier__base_estimator__n_estimators', 9097), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 3), ('classifier__max_iter', 1), ('classifier__threshold', 0.5597119450625194), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 98), ('dimension_reduction__n_components', 41), ('dimension_reduction__n_oversamples', 32), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', 92.91182025010602), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 55.25600928597322), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 1), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 10), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', 70.94191170796097), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.010235100841385982), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.019841625840443255), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', None), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 512), ('classifier__base_estimator__max_samples', 0.2419640635028555), ('classifier__base_estimator__min_impurity_decrease', 0.0490335795639538), ('classifier__base_estimator__min_samples_leaf', 16), ('classifier__base_estimator__min_samples_split', 10), ('classifier__base_estimator__min_weight_fraction_leaf', 0.44274735405416843), ('classifier__base_estimator__n_estimators', 9807), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 13), ('classifier__max_iter', 11), ('classifier__threshold', 0.5709157963552158), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 32), ('dimension_reduction__n_components', 120), ('dimension_reduction__n_oversamples', 10), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -56.90622102755683), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -32.430351584200594), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 34), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 58), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -6.545189074412548), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.48766468084931563), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.004400538609678594), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 128), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 1024), ('classifier__base_estimator__max_samples', 0.4033562514220227), ('classifier__base_estimator__min_impurity_decrease', 0.02817208399278653), ('classifier__base_estimator__min_samples_leaf', 11), ('classifier__base_estimator__min_samples_split', 8), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4994306301105256), ('classifier__base_estimator__n_estimators', 3589), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 2), ('classifier__max_iter', 13), ('classifier__threshold', 0.711781540936443), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 52), ('dimension_reduction__n_components', 6), ('dimension_reduction__n_oversamples', 84), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 82.65920959199119), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 53.80613423140258), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 26), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 75), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', -7.81917808779275), ('imputer__weights', 'distance'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.5053826294489581), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.02464423241359261), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 64), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.7349285808030386), ('classifier__base_estimator__min_impurity_decrease', 0.06729568008882957), ('classifier__base_estimator__min_samples_leaf', 1), ('classifier__base_estimator__min_samples_split', 7), ('classifier__base_estimator__min_weight_fraction_leaf', 0.11078137585057214), ('classifier__base_estimator__n_estimators', 2381), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 13), ('classifier__max_iter', 3), ('classifier__threshold', 0.6262488671453987), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 150), ('dimension_reduction__n_components', 93), ('dimension_reduction__n_oversamples', 79), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', -90.92805706185653), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -100.0), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 13), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 75), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', -100.0), ('imputer__weights', 'distance'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 0.8073887429630393), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04283737062882047), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 1024), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 2048), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.030110246824664174), ('classifier__base_estimator__min_samples_leaf', 9), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.353320807718024), ('classifier__base_estimator__n_estimators', 4549), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 3), ('classifier__max_iter', 10), ('classifier__threshold', 0.5161577624283021), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 113), ('dimension_reduction__n_components', 92), ('dimension_reduction__n_oversamples', 1), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 7.641145977661523), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 36.18474604289196), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 21), ('imputer__max_iter', 87), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 70), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', -32.136920011376986), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 0.2109365911034749), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l1'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03463505858299876), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 1024), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.3003898331403859), ('classifier__base_estimator__min_impurity_decrease', 0.1), ('classifier__base_estimator__min_samples_leaf', 5), ('classifier__base_estimator__min_samples_split', 16), ('classifier__base_estimator__min_weight_fraction_leaf', 0.0), ('classifier__base_estimator__n_estimators', 100), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 8), ('classifier__max_iter', 8), ('classifier__threshold', 0.6935153371094613), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 76), ('dimension_reduction__n_components', 67), ('dimension_reduction__n_oversamples', 6), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -69.2972297130994), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -51.26710463251282), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 40), ('imputer__max_iter', 93), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 25), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 67.08589286688468), ('imputer__weights', 'distance'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.0), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.04796138784204759), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 16384), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.23595284338197747), ('classifier__base_estimator__min_impurity_decrease', 0.09935864308013716), ('classifier__base_estimator__min_samples_leaf', 7), ('classifier__base_estimator__min_samples_split', 4), ('classifier__base_estimator__min_weight_fraction_leaf', 0.1439184600449945), ('classifier__base_estimator__n_estimators', 4952), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 15), ('classifier__max_iter', 6), ('classifier__threshold', 0.7302823179178402), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 63), ('dimension_reduction__n_components', 57), ('dimension_reduction__n_oversamples', 43), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 100.0), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -30.795876112886972), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 85), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 1), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -83.28251436768167), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.2892969012551769), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03398381796014683), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', None), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 16384), ('classifier__base_estimator__max_samples', 0.08577603604912502), ('classifier__base_estimator__min_impurity_decrease', 0.07656252631977473), ('classifier__base_estimator__min_samples_leaf', 11), ('classifier__base_estimator__min_samples_split', 2), ('classifier__base_estimator__min_weight_fraction_leaf', 0.11492821300153394), ('classifier__base_estimator__n_estimators', 1107), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 12), ('classifier__max_iter', 1), ('classifier__threshold', 0.5537914188456822), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 14), ('dimension_reduction__n_components', 118), ('dimension_reduction__n_oversamples', 30), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 33.674344350337606), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -24.161172157807812), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 60), ('imputer__max_iter', 55), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 16), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'constant'), ('imputer__tol', -59.97732232445026), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MinMaxScaler)()), ('scale__feature_range', 0.9829876314552294), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.031355724776367534), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 1), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 1024), ('classifier__base_estimator__max_samples', 0.3391207763376147), ('classifier__base_estimator__min_impurity_decrease', 0.0), ('classifier__base_estimator__min_samples_leaf', 4), ('classifier__base_estimator__min_samples_split', 14), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3269652747567043), ('classifier__base_estimator__n_estimators', 2911), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 9), ('classifier__max_iter', None), ('classifier__threshold', 0.5790123113953528), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 150), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 13), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -96.35119047176532), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 49.90323364232944), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 8), ('imputer__max_iter', 38), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 10), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'median'), ('imputer__tol', -40.83374148479943), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.29928309958903787), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.02789099109311335), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 8), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 16384), ('classifier__base_estimator__max_samples', 0.5356483222962373), ('classifier__base_estimator__min_impurity_decrease', 0.017632768554644233), ('classifier__base_estimator__min_samples_leaf', 10), ('classifier__base_estimator__min_samples_split', 6), ('classifier__base_estimator__min_weight_fraction_leaf', 0.329771349276854), ('classifier__base_estimator__n_estimators', 2883), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 6), ('classifier__max_iter', 15), ('classifier__threshold', 0.691917546724874), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 54), ('dimension_reduction__n_components', 31), ('dimension_reduction__n_oversamples', 38), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', 89.70775705541143), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -68.74614997194757), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 20), ('imputer__max_iter', 16), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 76), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', 23.402770761011894), ('imputer__weights', 'distance'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.044694580879300665), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0051897475323795135), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 4), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 256), ('classifier__base_estimator__max_samples', 0.6148560819218246), ('classifier__base_estimator__min_impurity_decrease', 0.059799001115871456), ('classifier__base_estimator__min_samples_leaf', 10), ('classifier__base_estimator__min_samples_split', 13), ('classifier__base_estimator__min_weight_fraction_leaf', 0.04993763624919665), ('classifier__base_estimator__n_estimators', 3012), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 3), ('classifier__max_iter', 1), ('classifier__threshold', 0.7385919223347245), ('dimension_reduction', SupressParameter(PCA)()), ('dimension_reduction__k', 117), ('dimension_reduction__n_components', 40), ('dimension_reduction__n_oversamples', 65), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -0.43009892698020735), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 80.50366865426915), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 68), ('imputer__max_iter', 94), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 67), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', -62.91801537558751), ('imputer__weights', 'uniform'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.24497154108245797), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.034491035043096155), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 512), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', None), ('classifier__base_estimator__max_samples', 0.4700697021615109), ('classifier__base_estimator__min_impurity_decrease', 0.07492849945266308), ('classifier__base_estimator__min_samples_leaf', 5), ('classifier__base_estimator__min_samples_split', 10), ('classifier__base_estimator__min_weight_fraction_leaf', 0.19903048597210288), ('classifier__base_estimator__n_estimators', 671), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 2), ('classifier__max_iter', 4), ('classifier__threshold', 0.5865266384071282), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 114), ('dimension_reduction__n_components', 83), ('dimension_reduction__n_oversamples', 53), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 88.14607703747242), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -6.667662582879359), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 70), ('imputer__max_iter', 100), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 47), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', 30.367589798753016), ('imputer__weights', 'distance'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.16239101055410632), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03539142042312425), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 256), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 64), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.044685264996256684), ('classifier__base_estimator__min_samples_leaf', 11), ('classifier__base_estimator__min_samples_split', 7), ('classifier__base_estimator__min_weight_fraction_leaf', 0.23281604685287247), ('classifier__base_estimator__n_estimators', 1831), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 14), ('classifier__max_iter', 15), ('classifier__threshold', 0.5484312885049366), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 24), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 48), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -45.75558959567667), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -5.162423465378808), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 45), ('imputer__max_iter', 76), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 7), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'constant'), ('imputer__tol', -92.94537258375225), ('imputer__weights', 'distance'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.019459723723033666), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.036842773268064524), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 1024), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 8192), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.03339238146079473), ('classifier__base_estimator__min_samples_leaf', 6), ('classifier__base_estimator__min_samples_split', 12), ('classifier__base_estimator__min_weight_fraction_leaf', 0.07240844903713553), ('classifier__base_estimator__n_estimators', 2202), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 15), ('classifier__max_iter', 10), ('classifier__threshold', 0.6374022988400081), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 54), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 21), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -79.98372367361185), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -18.995158570281248), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 69), ('imputer__max_iter', 53), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 89), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', 5.674531449190567), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.0), ('scale__method', 'box-cox'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.026486851117608953), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 64), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 64), ('classifier__base_estimator__max_samples', 0.8509358397122398), ('classifier__base_estimator__min_impurity_decrease', 0.09346307611283207), ('classifier__base_estimator__min_samples_leaf', 1), ('classifier__base_estimator__min_samples_split', 13), ('classifier__base_estimator__min_weight_fraction_leaf', 0.07599726470061545), ('classifier__base_estimator__n_estimators', 1763), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 1), ('classifier__max_iter', 12), ('classifier__threshold', 0.583907810634088), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 46), ('dimension_reduction__n_components', 90), ('dimension_reduction__n_oversamples', 21), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 43.91660730579585), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 76.09999124542705), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 80), ('imputer__max_iter', 100), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 87), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', -29.968409318355256), ('imputer__weights', 'uniform'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.13535710372684212), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.05), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', None), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.0808933121244147), ('classifier__base_estimator__min_samples_leaf', 16), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.19206717525525435), ('classifier__base_estimator__n_estimators', 4094), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 8), ('classifier__max_iter', 6), ('classifier__threshold', 0.7498467571851914), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 105), ('dimension_reduction__n_components', 2), ('dimension_reduction__n_oversamples', 83), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 25.60060847071803), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 51.15545951029665), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 1), ('imputer__max_iter', 37), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 56), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -49.84476166389089), ('imputer__weights', 'distance'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.0), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.005872491116599155), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', None), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 32), ('classifier__base_estimator__max_samples', 1.0), ('classifier__base_estimator__min_impurity_decrease', 0.06118911005986171), ('classifier__base_estimator__min_samples_leaf', 9), ('classifier__base_estimator__min_samples_split', 8), ('classifier__base_estimator__min_weight_fraction_leaf', 0.39202382493424864), ('classifier__base_estimator__n_estimators', 9126), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 4), ('classifier__max_iter', 14), ('classifier__threshold', 0.5659213235926319), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 149), ('dimension_reduction__n_components', 68), ('dimension_reduction__n_oversamples', 0), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 2.565195062524168), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 31.666508580323296), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 81), ('imputer__max_iter', 90), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 22), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -67.51088088690105), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.6948059391241038), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.025223335346422356), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 1024), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 128), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.04466943481894196), ('classifier__base_estimator__min_samples_leaf', 12), ('classifier__base_estimator__min_samples_split', 7), ('classifier__base_estimator__min_weight_fraction_leaf', 0.29457535959688946), ('classifier__base_estimator__n_estimators', 8307), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 4), ('classifier__max_iter', 15), ('classifier__threshold', 0.7013981286046466), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 144), ('dimension_reduction__n_components', 20), ('dimension_reduction__n_oversamples', 0), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 2.006760008308646), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -22.201921745957293), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 86), ('imputer__max_iter', 66), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 1), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', -34.295709296254046), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.9675946849105779), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0071408814661196515), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 2048), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 8), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.04576592741055295), ('classifier__base_estimator__min_samples_leaf', 3), ('classifier__base_estimator__min_samples_split', 8), ('classifier__base_estimator__min_weight_fraction_leaf', 0.002952584104931036), ('classifier__base_estimator__n_estimators', 6337), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 4), ('classifier__max_iter', 0), ('classifier__threshold', 0.689391793236083), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 82), ('dimension_reduction__n_components', 2), ('dimension_reduction__n_oversamples', 7), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -25.82976168168024), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -38.981551222444985), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 35), ('imputer__max_iter', 28), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 37), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', 21.82083981021698), ('imputer__weights', 'distance'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.6317915737068707), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.022147881414578748), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 256), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 32), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.01850942160670957), ('classifier__base_estimator__min_samples_leaf', 12), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.2585663384158811), ('classifier__base_estimator__n_estimators', 8020), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 5), ('classifier__max_iter', 5), ('classifier__threshold', 0.6663745598694407), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 101), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 51), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 56.35557303376419), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 79.81601919254962), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 65), ('imputer__max_iter', 1), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 65), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', -10.92743766868523), ('imputer__weights', 'uniform'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.4478495703439843), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.019786184656402774), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 1024), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 32), ('classifier__base_estimator__max_samples', 0.1749684346604139), ('classifier__base_estimator__min_impurity_decrease', 0.032030563097526575), ('classifier__base_estimator__min_samples_leaf', 16), ('classifier__base_estimator__min_samples_split', 10), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4022204450835274), ('classifier__base_estimator__n_estimators', 2581), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 12), ('classifier__max_iter', 11), ('classifier__threshold', 0.6604631032121757), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 93), ('dimension_reduction__n_components', 150), ('dimension_reduction__n_oversamples', 77), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 83.05992901180645), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -9.880098133128797), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 91), ('imputer__max_iter', 65), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 84), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', -26.23592382987266), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.10053455934188289), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.02645374336010984), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 256), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 256), ('classifier__base_estimator__max_samples', 0.444188034817921), ('classifier__base_estimator__min_impurity_decrease', 0.0759515242788378), ('classifier__base_estimator__min_samples_leaf', 4), ('classifier__base_estimator__min_samples_split', 15), ('classifier__base_estimator__min_weight_fraction_leaf', 0.28977899984793454), ('classifier__base_estimator__n_estimators', 7450), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 4), ('classifier__max_iter', 14), ('classifier__threshold', 0.5777201178387612), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 50), ('dimension_reduction__n_components', 27), ('dimension_reduction__n_oversamples', 12), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -54.037667191177206), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -8.265818411768578), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 39), ('imputer__max_iter', 67), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 69), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', -68.36070373188547), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.33874308573538436), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.0005599633357182007), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 128), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 2), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.02128117023737674), ('classifier__base_estimator__min_samples_leaf', 7), ('classifier__base_estimator__min_samples_split', 10), ('classifier__base_estimator__min_weight_fraction_leaf', 0.49048946814787786), ('classifier__base_estimator__n_estimators', 3579), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 10), ('classifier__max_iter', 1), ('classifier__threshold', 0.5434147863587463), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 2), ('dimension_reduction__n_components', 14), ('dimension_reduction__n_oversamples', 79), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -39.40045485592544), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -53.285051116712054), ('imputer__imputation_order', 'arabic'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 16), ('imputer__max_iter', 91), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 21), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', -99.03420125148519), ('imputer__weights', 'distance'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.5503504025177987), ('scale__method', 'yeo-johnson'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.030945640828540084), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 2), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 32), ('classifier__base_estimator__max_samples', 0.26973290067231215), ('classifier__base_estimator__min_impurity_decrease', 0.07197041054283093), ('classifier__base_estimator__min_samples_leaf', 9), ('classifier__base_estimator__min_samples_split', 12), ('classifier__base_estimator__min_weight_fraction_leaf', 0.2023401778176587), ('classifier__base_estimator__n_estimators', 7771), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 15), ('classifier__max_iter', 7), ('classifier__threshold', 0.6650383050403482), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 96), ('dimension_reduction__n_components', 122), ('dimension_reduction__n_oversamples', 89), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', 29.669189417648056), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', -22.824788690850426), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 82), ('imputer__max_iter', 57), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 3), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'mean'), ('imputer__tol', 90.45029761462905), ('imputer__weights', 'distance'), ('scale', SupressParameter(Normalizer)()), ('scale__feature_range', 0.12099682756068468), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03011439616520883), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 256), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 8192), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.020997019516426994), ('classifier__base_estimator__min_samples_leaf', 8), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.3670463831561968), ('classifier__base_estimator__n_estimators', 4793), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 15), ('classifier__max_iter', 4), ('classifier__threshold', 0.5301918700440453), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 126), ('dimension_reduction__n_components', 130), ('dimension_reduction__n_oversamples', 57), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', -41.65166828732359), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 3.2817753171144943), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 68), ('imputer__max_iter', 64), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 18), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'constant'), ('imputer__tol', -70.58435033908727), ('imputer__weights', 'distance'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.10380183620425794), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.017581391287492986), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 4), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 256), ('classifier__base_estimator__max_samples', 0.5100237698516011), ('classifier__base_estimator__min_impurity_decrease', 0.034674896791964886), ('classifier__base_estimator__min_samples_leaf', 3), ('classifier__base_estimator__min_samples_split', 10), ('classifier__base_estimator__min_weight_fraction_leaf', 0.0013391829146103813), ('classifier__base_estimator__n_estimators', 7188), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 9), ('classifier__max_iter', 14), ('classifier__threshold', 0.5119864559382111), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 145), ('dimension_reduction__n_components', 30), ('dimension_reduction__n_oversamples', 47), ('dimension_reduction__power_iteration_normalizer', 'LU'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -2.8178118477143386), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 99.8228102228415), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'constant'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 27), ('imputer__max_iter', 27), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 50), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', 85.56511453001448), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.1124730155399269), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03543350795433445), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'log_loss'), ('classifier__base_estimator__max_depth', 1024), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 4), ('classifier__base_estimator__max_samples', 0.05), ('classifier__base_estimator__min_impurity_decrease', 0.010771052910217224), ('classifier__base_estimator__min_samples_leaf', 13), ('classifier__base_estimator__min_samples_split', 8), ('classifier__base_estimator__min_weight_fraction_leaf', 0.4342254261207923), ('classifier__base_estimator__n_estimators', 1327), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 10), ('classifier__max_iter', 5), ('classifier__threshold', 0.588979762330883), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 38), ('dimension_reduction__n_components', 122), ('dimension_reduction__n_oversamples', 87), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -100.0), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -23.89137506093401), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 69), ('imputer__max_iter', 93), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 67), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'constant'), ('imputer__tol', 86.69191208400068), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.0987112006016925), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.021199087609629755), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'entropy'), ('classifier__base_estimator__max_depth', 4096), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 8192), ('classifier__base_estimator__max_samples', 0.8042928015199367), ('classifier__base_estimator__min_impurity_decrease', 0.003692335368957954), ('classifier__base_estimator__min_samples_leaf', 3), ('classifier__base_estimator__min_samples_split', 14), ('classifier__base_estimator__min_weight_fraction_leaf', 0.04511612207866157), ('classifier__base_estimator__n_estimators', 7244), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'threshold'), ('classifier__k_best', 16), ('classifier__max_iter', 13), ('classifier__threshold', 0.7011959788522081), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 2), ('dimension_reduction__n_components', 74), ('dimension_reduction__n_oversamples', 16), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 25.392565218131423), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 37.057780944348565), ('imputer__imputation_order', 'random'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 83), ('imputer__max_iter', 68), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 27), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'constant'), ('imputer__tol', 85.92379586932753), ('imputer__weights', 'distance'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.4089051467004351), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03086045367763157), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 2048), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 16384), ('classifier__base_estimator__max_samples', 0.4796603692590862), ('classifier__base_estimator__min_impurity_decrease', 0.0), ('classifier__base_estimator__min_samples_leaf', 14), ('classifier__base_estimator__min_samples_split', 10), ('classifier__base_estimator__min_weight_fraction_leaf', 0.0502186757294564), ('classifier__base_estimator__n_estimators', 2373), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 9), ('classifier__max_iter', 2), ('classifier__threshold', 0.6509551494278173), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 23), ('dimension_reduction__n_components', 61), ('dimension_reduction__n_oversamples', 28), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', -40.94849697596338), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 68.1370182783993), ('imputer__imputation_order', 'roman'), ('imputer__initial_strategy', 'most_frequent'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 60), ('imputer__max_iter', 90), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 49), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'constant'), ('imputer__tol', -45.58694244151062), ('imputer__weights', 'uniform'), ('scale', SupressParameter(RobustScaler)()), ('scale__feature_range', 0.12286590519497169), ('scale__method', 'box-cox'), ('scale__norm', 'l2'), ('scale__standardize', True), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', True)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.020877027409518353), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 512), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 8), ('classifier__base_estimator__max_samples', 0.6939064628963019), ('classifier__base_estimator__min_impurity_decrease', 0.016330249106158923), ('classifier__base_estimator__min_samples_leaf', 3), ('classifier__base_estimator__min_samples_split', 15), ('classifier__base_estimator__min_weight_fraction_leaf', 0.04671742951493874), ('classifier__base_estimator__n_estimators', 9167), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'k_best'), ('classifier__k_best', 5), ('classifier__max_iter', 13), ('classifier__threshold', 0.6316842781077937), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 79), ('dimension_reduction__n_components', 138), ('dimension_reduction__n_oversamples', 69), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'auto'), ('dimension_reduction__tol', 63.362732938819136), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(IterativeImputer)()), ('imputer__add_indicator', True), ('imputer__fill_value', 65.12929107820275), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'median'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 22), ('imputer__max_iter', 29), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 83), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'median'), ('imputer__tol', -68.82473907618652), ('imputer__weights', 'distance'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.39001859915416354), ('scale__method', 'box-cox'), ('scale__norm', 'l1'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', True), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.03819298556498897), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 4), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 16384), ('classifier__base_estimator__max_samples', 0.635797346075052), ('classifier__base_estimator__min_impurity_decrease', 0.0), ('classifier__base_estimator__min_samples_leaf', 7), ('classifier__base_estimator__min_samples_split', 7), ('classifier__base_estimator__min_weight_fraction_leaf', 0.11748429853407238), ('classifier__base_estimator__n_estimators', 7343), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', True), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 8), ('classifier__max_iter', 10), ('classifier__threshold', 0.7043736509837389), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 45), ('dimension_reduction__n_components', 64), ('dimension_reduction__n_oversamples', 0), ('dimension_reduction__power_iteration_normalizer', 'none'), ('dimension_reduction__score_func', 'mutual_info_classif'), ('dimension_reduction__svd_solver', 'full'), ('dimension_reduction__tol', -59.80402098778684), ('dimension_reduction__whiten', True), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -20.979688019389258), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', False), ('imputer__kn_neighbors', 25), ('imputer__max_iter', 52), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 87), ('imputer__sample_posterior', True), ('imputer__skip_complete', True), ('imputer__strategy', 'most_frequent'), ('imputer__tol', -23.27238672441696), ('imputer__weights', 'uniform'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.4080573279325843), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.034534909998840936), ('classifier__base_estimator__class_weight', 'balanced'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 64), ('classifier__base_estimator__max_features', 'log2'), ('classifier__base_estimator__max_leaf_nodes', 512), ('classifier__base_estimator__max_samples', 0.5503183470486125), ('classifier__base_estimator__min_impurity_decrease', 0.02724117622201245), ('classifier__base_estimator__min_samples_leaf', 2), ('classifier__base_estimator__min_samples_split', 11), ('classifier__base_estimator__min_weight_fraction_leaf', 0.18787783792034668), ('classifier__base_estimator__n_estimators', 1268), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 13), ('classifier__max_iter', 10), ('classifier__threshold', 0.6464344327357384), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 57), ('dimension_reduction__n_components', 74), ('dimension_reduction__n_oversamples', 5), ('dimension_reduction__power_iteration_normalizer', 'QR'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', -79.14581625944254), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(SimpleImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 69.02475978385269), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 79), ('imputer__max_iter', 70), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 69), ('imputer__sample_posterior', False), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', 83.81720517670749), ('imputer__weights', 'uniform'), ('scale', SupressParameter(PowerTransformer)()), ('scale__feature_range', 0.44205392549222516), ('scale__method', 'box-cox'), ('scale__norm', 'max'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.010272639035853256), ('classifier__base_estimator__class_weight', 'balanced_subsample'), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 16384), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 64), ('classifier__base_estimator__max_samples', 0.5794059223211485), ('classifier__base_estimator__min_impurity_decrease', 0.0027930889009540262), ('classifier__base_estimator__min_samples_leaf', 9), ('classifier__base_estimator__min_samples_split', 13), ('classifier__base_estimator__min_weight_fraction_leaf', 0.05345019235718892), ('classifier__base_estimator__n_estimators', 3548), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', True), ('classifier__criterion', 'threshold'), ('classifier__k_best', 13), ('classifier__max_iter', 9), ('classifier__threshold', 0.6363685216501033), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 100), ('dimension_reduction__n_components', 39), ('dimension_reduction__n_oversamples', 32), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'chi2'), ('dimension_reduction__svd_solver', 'arpack'), ('dimension_reduction__tol', 65.17185370939706), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', 93.57669632156279), ('imputer__imputation_order', 'ascending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 69), ('imputer__max_iter', 71), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 66), ('imputer__sample_posterior', True), ('imputer__skip_complete', False), ('imputer__strategy', 'mean'), ('imputer__tol', 61.039798413875076), ('imputer__weights', 'uniform'), ('scale', SupressParameter(MaxAbsScaler)()), ('scale__feature_range', 0.30942497056734014), ('scale__method', 'yeo-johnson'), ('scale__norm', 'max'), ('scale__standardize', True), ('scale__unit_variance', False), ('scale__with_centering', False), ('scale__with_mean', False), ('scale__with_scaling', False)]), OrderedDict([('classifier__base_estimator__bootstrap', True), ('classifier__base_estimator__ccp_alpha', 0.05), ('classifier__base_estimator__class_weight', None), ('classifier__base_estimator__criterion', 'gini'), ('classifier__base_estimator__max_depth', 2), ('classifier__base_estimator__max_features', 'sqrt'), ('classifier__base_estimator__max_leaf_nodes', 1024), ('classifier__base_estimator__max_samples', 0.5526593753671546), ('classifier__base_estimator__min_impurity_decrease', 0.02780785059314851), ('classifier__base_estimator__min_samples_leaf', 1), ('classifier__base_estimator__min_samples_split', 14), ('classifier__base_estimator__min_weight_fraction_leaf', 0.37129716295246734), ('classifier__base_estimator__n_estimators', 6916), ('classifier__base_estimator__n_jobs', -1), ('classifier__base_estimator__oob_score', False), ('classifier__base_estimator__warm_start', False), ('classifier__criterion', 'k_best'), ('classifier__k_best', 1), ('classifier__max_iter', 0), ('classifier__threshold', 0.5776055040110198), ('dimension_reduction', SupressParameter(SelectKBest)()), ('dimension_reduction__k', 123), ('dimension_reduction__n_components', 111), ('dimension_reduction__n_oversamples', 72), ('dimension_reduction__power_iteration_normalizer', 'auto'), ('dimension_reduction__score_func', 'f_classif'), ('dimension_reduction__svd_solver', 'randomized'), ('dimension_reduction__tol', -85.12473757304606), ('dimension_reduction__whiten', False), ('imputer', SupressParameter(KNNImputer)()), ('imputer__add_indicator', False), ('imputer__fill_value', -63.36325963559602), ('imputer__imputation_order', 'descending'), ('imputer__initial_strategy', 'mean'), ('imputer__keep_empty_features', True), ('imputer__kn_neighbors', 10), ('imputer__max_iter', 79), ('imputer__metric', 'nan_euclidean'), ('imputer__n_nearest_features', 18), ('imputer__sample_posterior', False), ('imputer__skip_complete', True), ('imputer__strategy', 'median'), ('imputer__tol', -86.81021339281168), ('imputer__weights', 'distance'), ('scale', SupressParameter(StandardScaler)()), ('scale__feature_range', 0.7388992293228245), ('scale__method', 'box-cox'), ('scale__norm', 'l1'), ('scale__standardize', False), ('scale__unit_variance', True), ('scale__with_centering', False), ('scale__with_mean', True), ('scale__with_scaling', True)])], 'split0_test_score': array([0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.80555556,
       0.72222222, 0.72222222, 0.61111111, 0.72222222, 0.80555556,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.80555556, 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.80555556, 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.77777778, 0.72222222, 0.72222222, 0.66666667, 0.72222222,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.72222222, 0.75      , 0.72222222, 0.77777778, 0.69444444,
       0.72222222, 0.44444444, 0.75      , 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.72222222, 0.80555556, 0.75      , 0.77777778, 0.72222222,
       0.44444444, 0.72222222, 0.72222222, 0.75      , 0.72222222,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.63888889, 0.72222222, 0.72222222,
       0.80555556, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.75      ,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.61111111, 0.72222222, 0.72222222,
       0.75      , 0.72222222, 0.80555556, 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.72222222, 0.72222222, 0.72222222, 0.72222222, 0.72222222,
       0.80555556, 0.75      , 0.77777778, 0.66666667, 0.72222222]), 'split1_test_score': array([0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.74285714,
       0.77142857, 0.77142857, 0.48571429, 0.77142857, 0.74285714,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.74285714, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.74285714, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.74285714, 0.77142857, 0.74285714, 0.74285714,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.74285714, 0.74285714, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.74285714, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.68571429,
       0.74285714, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.57142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.54285714, 0.77142857, 0.77142857,
       0.74285714, 0.77142857, 0.74285714, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.74285714, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.74285714, 0.77142857, 0.8       , 0.77142857, 0.77142857]), 'split2_test_score': array([0.77142857, 0.77142857, 0.77142857, 0.74285714, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.6       ,
       0.77142857, 0.77142857, 0.68571429, 0.77142857, 0.6       ,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.74285714,
       0.77142857, 0.77142857, 0.6       , 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.74285714,
       0.74285714, 0.77142857, 0.62857143, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.62857143, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.71428571, 0.77142857, 0.68571429, 0.6       ,
       0.77142857, 0.6       , 0.6       , 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.6       , 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.71428571, 0.74285714, 0.6       , 0.74285714, 0.77142857,
       0.77142857, 0.77142857, 0.6       , 0.74285714, 0.77142857,
       0.68571429, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.74285714, 0.77142857, 0.62857143,
       0.74285714, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.74285714,
       0.77142857, 0.68571429, 0.77142857, 0.77142857, 0.74285714,
       0.77142857, 0.77142857, 0.68571429, 0.77142857, 0.77142857,
       0.71428571, 0.77142857, 0.6       , 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.74285714, 0.77142857, 0.77142857,
       0.77142857, 0.77142857, 0.77142857, 0.77142857, 0.77142857,
       0.74285714, 0.6       , 0.74285714, 0.6       , 0.77142857]), 'mean_test_score': array([0.75502646, 0.75502646, 0.75502646, 0.74550265, 0.75502646,
       0.75502646, 0.75502646, 0.75502646, 0.75502646, 0.75502646,
       0.75502646, 0.75502646, 0.75502646, 0.75502646, 0.75502646,
       0.75502646, 0.75502646, 0.75502646, 0.75502646, 0.71613757,
       0.75502646, 0.75502646, 0.59417989, 0.75502646, 0.71613757,
       0.75502646, 0.75502646, 0.75502646, 0.75502646, 0.74550265,
       0.75502646, 0.75502646, 0.71613757, 0.75502646, 0.75502646,
       0.75502646, 0.75502646, 0.75502646, 0.75502646, 0.74550265,
       0.74550265, 0.75502646, 0.72566138, 0.75502646, 0.75502646,
       0.75502646, 0.75502646, 0.75502646, 0.75502646, 0.75502646,
       0.72592593, 0.75502646, 0.75502646, 0.73650794, 0.75502646,
       0.75502646, 0.75502646, 0.75502646, 0.75502646, 0.75502646,
       0.75502646, 0.73571429, 0.75502646, 0.73544974, 0.67910053,
       0.75502646, 0.60529101, 0.70714286, 0.75502646, 0.75502646,
       0.75502646, 0.75502646, 0.75502646, 0.75502646, 0.75502646,
       0.75502646, 0.75502646, 0.75502646, 0.75502646, 0.75502646,
       0.6978836 , 0.75502646, 0.75502646, 0.75502646, 0.75502646,
       0.73597884, 0.76375661, 0.69761905, 0.76402116, 0.75502646,
       0.66243386, 0.75502646, 0.6978836 , 0.7452381 , 0.75502646,
       0.72645503, 0.75502646, 0.75502646, 0.75502646, 0.75502646,
       0.75502646, 0.75502646, 0.75502646, 0.75502646, 0.75502646,
       0.75502646, 0.75502646, 0.71772487, 0.75502646, 0.67883598,
       0.76375661, 0.75502646, 0.75502646, 0.75502646, 0.75502646,
       0.75502646, 0.75502646, 0.75502646, 0.75502646, 0.7547619 ,
       0.75502646, 0.65978836, 0.75502646, 0.75502646, 0.74550265,
       0.75502646, 0.75502646, 0.61322751, 0.75502646, 0.75502646,
       0.73571429, 0.75502646, 0.71613757, 0.75502646, 0.75502646,
       0.75502646, 0.75502646, 0.73597884, 0.75502646, 0.75502646,
       0.75502646, 0.75502646, 0.75502646, 0.75502646, 0.75502646,
       0.76375661, 0.70714286, 0.77354497, 0.67936508, 0.75502646]), 'std_test_score': array([0.0231961 , 0.0231961 , 0.0231961 , 0.02017532, 0.0231961 ,
       0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 ,
       0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 ,
       0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 , 0.08601831,
       0.0231961 , 0.0231961 , 0.08252272, 0.0231961 , 0.08601831,
       0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 , 0.02017532,
       0.0231961 , 0.0231961 , 0.08601831, 0.0231961 , 0.0231961 ,
       0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 , 0.02017532,
       0.02017532, 0.0231961 , 0.07326944, 0.0231961 , 0.0231961 ,
       0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 ,
       0.06888881, 0.0231961 , 0.0231961 , 0.04938524, 0.0231961 ,
       0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 ,
       0.0231961 , 0.01543033, 0.0231961 , 0.03794798, 0.05932182,
       0.0231961 , 0.13354313, 0.07626484, 0.0231961 , 0.0231961 ,
       0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 ,
       0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 ,
       0.07207041, 0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 ,
       0.02527528, 0.02955632, 0.06908866, 0.01518804, 0.0231961 ,
       0.1541418 , 0.0231961 , 0.07207041, 0.00336718, 0.0231961 ,
       0.03512048, 0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 ,
       0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 ,
       0.0231961 , 0.0231961 , 0.0569527 , 0.0231961 , 0.0385409 ,
       0.02955632, 0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 ,
       0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 , 0.01214052,
       0.0231961 , 0.06423289, 0.0231961 , 0.0231961 , 0.02017532,
       0.0231961 , 0.0231961 , 0.05834038, 0.0231961 , 0.0231961 ,
       0.01543033, 0.0231961 , 0.08601831, 0.0231961 , 0.0231961 ,
       0.0231961 , 0.0231961 , 0.00972739, 0.0231961 , 0.0231961 ,
       0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 , 0.0231961 ,
       0.02955632, 0.07626484, 0.02351969, 0.07055908, 0.0231961 ]), 'rank_test_score': array([  6,   6,   6, 118,   6,   6,   6,   6,   6,   6,   6,   6,   6,
         6,   6,   6,   6,   6,   6, 134,   6,   6, 150,   6, 134,   6,
         6,   6,   6, 118,   6,   6, 134,   6,   6,   6,   6,   6,   6,
       118, 118,   6, 132,   6,   6,   6,   6,   6,   6,   6, 131,   6,
         6, 124,   6,   6,   6,   6,   6,   6,   6, 127,   6, 129, 144,
         6, 149, 138,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,
         6,   6, 140,   6,   6,   6,   6, 125,   3, 142,   2,   6, 146,
         6, 140, 123,   6, 130,   6,   6,   6,   6,   6,   6,   6,   6,
         6,   6,   6, 133,   6, 145,   3,   6,   6,   6,   6,   6,   6,
         6,   6, 117,   6, 147,   6,   6, 118,   6,   6, 148,   6,   6,
       127,   6, 134,   6,   6,   6,   6, 125,   6,   6,   6,   6,   6,
         6,   6,   3, 138,   1, 143,   6], dtype=int32)}